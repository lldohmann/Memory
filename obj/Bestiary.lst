                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.2 #13350 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module Bestiary
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _BestiaryUpdate
                                     12 	.globl _BestiarySetup
                                     13 	.globl _InvertColor
                                     14 	.globl _fadeFromBlack
                                     15 	.globl _fadeToBlack
                                     16 	.globl _DrawNumber
                                     17 	.globl _set_bkg_tiles
                                     18 	.globl _set_bkg_data
                                     19 	.globl _joypad
                                     20 	.globl _invert
                                     21 	.globl _index
                                     22 ;--------------------------------------------------------
                                     23 ; special function registers
                                     24 ;--------------------------------------------------------
                                     25 ;--------------------------------------------------------
                                     26 ; ram data
                                     27 ;--------------------------------------------------------
                                     28 	.area _DATA
                                     29 ;--------------------------------------------------------
                                     30 ; ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area _INITIALIZED
                           000000    33 G$index$0_0$0==.
      000000                         34 _index::
      000000                         35 	.ds 1
                           000001    36 G$invert$0_0$0==.
      000001                         37 _invert::
      000001                         38 	.ds 1
                                     39 ;--------------------------------------------------------
                                     40 ; absolute external ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area _DABS (ABS)
                                     43 ;--------------------------------------------------------
                                     44 ; global & static initialisations
                                     45 ;--------------------------------------------------------
                                     46 	.area _HOME
                                     47 	.area _GSINIT
                                     48 	.area _GSFINAL
                                     49 	.area _GSINIT
                                     50 ;--------------------------------------------------------
                                     51 ; Home
                                     52 ;--------------------------------------------------------
                                     53 	.area _HOME
                                     54 	.area _HOME
                                     55 ;--------------------------------------------------------
                                     56 ; code
                                     57 ;--------------------------------------------------------
                                     58 	.area _CODE
                           000000    59 	G$BestiarySetup$0$0	= .
                                     60 	.globl	G$BestiarySetup$0$0
                           000000    61 	C$Bestiary.c$21$0_0$104	= .
                                     62 	.globl	C$Bestiary.c$21$0_0$104
                                     63 ;src\Bestiary.c:21: void BestiarySetup()
                                     64 ;	---------------------------------
                                     65 ; Function BestiarySetup
                                     66 ; ---------------------------------
      000000                         67 _BestiarySetup::
                           000000    68 	C$Bestiary.c$23$1_0$104	= .
                                     69 	.globl	C$Bestiary.c$23$1_0$104
                                     70 ;src\Bestiary.c:23: set_bkg_data(0, 53, FontTiles); // Load font and window tiles
      000000 11r00r00         [12]   71 	ld	de, #_FontTiles
      000003 D5               [16]   72 	push	de
      000004 21 00 35         [12]   73 	ld	hl, #0x3500
      000007 E5               [16]   74 	push	hl
      000008 CDr00r00         [24]   75 	call	_set_bkg_data
      00000B E8 04            [16]   76 	add	sp, #4
                           00000D    77 	C$Bestiary.c$24$1_0$104	= .
                                     78 	.globl	C$Bestiary.c$24$1_0$104
                                     79 ;src\Bestiary.c:24: set_bkg_tiles(0, 0, Bestiary_MapWidth, Bestiary_MapHeight, Bestiary_Map); // draw background window & text
      00000D 11r00r00         [12]   80 	ld	de, #_Bestiary_Map
      000010 D5               [16]   81 	push	de
      000011 21 14 12         [12]   82 	ld	hl, #0x1214
      000014 E5               [16]   83 	push	hl
      000015 AF               [ 4]   84 	xor	a, a
      000016 0F               [ 4]   85 	rrca
      000017 F5               [16]   86 	push	af
      000018 CDr00r00         [24]   87 	call	_set_bkg_tiles
      00001B E8 06            [16]   88 	add	sp, #6
                           00001D    89 	C$Bestiary.c$25$1_0$104	= .
                                     90 	.globl	C$Bestiary.c$25$1_0$104
                                     91 ;src\Bestiary.c:25: SHOW_BKG; 
      00001D F0r00            [12]   92 	ldh	a, (_LCDC_REG + 0)
      00001F F6 01            [ 8]   93 	or	a, #0x01
      000021 E0r00            [12]   94 	ldh	(_LCDC_REG + 0), a
                           000023    95 	C$Bestiary.c$26$1_0$104	= .
                                     96 	.globl	C$Bestiary.c$26$1_0$104
                                     97 ;src\Bestiary.c:26: fadeFromBlack(10);
      000023 3E 0A            [ 8]   98 	ld	a, #0x0a
                           000025    99 	C$Bestiary.c$27$1_0$104	= .
                                    100 	.globl	C$Bestiary.c$27$1_0$104
                                    101 ;src\Bestiary.c:27: }
                           000025   102 	C$Bestiary.c$27$1_0$104	= .
                                    103 	.globl	C$Bestiary.c$27$1_0$104
                           000025   104 	XG$BestiarySetup$0$0	= .
                                    105 	.globl	XG$BestiarySetup$0$0
      000025 C3r00r00         [16]  106 	jp	_fadeFromBlack
                           000028   107 	G$BestiaryUpdate$0$0	= .
                                    108 	.globl	G$BestiaryUpdate$0$0
                           000028   109 	C$Bestiary.c$29$1_0$105	= .
                                    110 	.globl	C$Bestiary.c$29$1_0$105
                                    111 ;src\Bestiary.c:29: uint8_t BestiaryUpdate()
                                    112 ;	---------------------------------
                                    113 ; Function BestiaryUpdate
                                    114 ; ---------------------------------
      000028                        115 _BestiaryUpdate::
                           000028   116 	C$Bestiary.c$31$1_0$105	= .
                                    117 	.globl	C$Bestiary.c$31$1_0$105
                                    118 ;src\Bestiary.c:31: joypadPrevious = joypadCurrent;
      000028 FAr00r00         [16]  119 	ld	a, (#_joypadCurrent)
      00002B EAr00r00         [16]  120 	ld	(#_joypadPrevious),a
                           00002E   121 	C$Bestiary.c$32$1_0$105	= .
                                    122 	.globl	C$Bestiary.c$32$1_0$105
                                    123 ;src\Bestiary.c:32: joypadCurrent = joypad();
      00002E CDr00r00         [24]  124 	call	_joypad
      000031 21r00r00         [12]  125 	ld	hl, #_joypadCurrent
      000034 77               [ 8]  126 	ld	(hl), a
                           000035   127 	C$Bestiary.c$31$1_0$105	= .
                                    128 	.globl	C$Bestiary.c$31$1_0$105
                                    129 ;src\Bestiary.c:31: joypadPrevious = joypadCurrent;
      000035 4E               [ 8]  130 	ld	c, (hl)
                           000036   131 	C$Bestiary.c$34$1_0$105	= .
                                    132 	.globl	C$Bestiary.c$34$1_0$105
                                    133 ;src\Bestiary.c:34: if (joypadCurrent & J_LEFT)
      000036 CB 49            [ 8]  134 	bit	1, c
      000038 28 11            [12]  135 	jr	Z, 00104$
                           00003A   136 	C$Bestiary.c$36$2_0$106	= .
                                    137 	.globl	C$Bestiary.c$36$2_0$106
                                    138 ;src\Bestiary.c:36: if (index - 1 >= 0)
      00003A FAr00r00         [16]  139 	ld	a, (#_index)
      00003D 47               [ 4]  140 	ld	b, a
      00003E 07               [ 4]  141 	rlca
      00003F 9F               [ 4]  142 	sbc	a, a
      000040 68               [ 4]  143 	ld	l, b
      000041 67               [ 4]  144 	ld	h, a
      000042 2B               [ 8]  145 	dec	hl
      000043 CB 7C            [ 8]  146 	bit	7, h
      000045 20 04            [12]  147 	jr	NZ, 00104$
                           000047   148 	C$Bestiary.c$38$3_0$107	= .
                                    149 	.globl	C$Bestiary.c$38$3_0$107
                                    150 ;src\Bestiary.c:38: index--;
      000047 21r00r00         [12]  151 	ld	hl, #_index
      00004A 35               [12]  152 	dec	(hl)
      00004B                        153 00104$:
                           00004B   154 	C$Bestiary.c$41$1_0$105	= .
                                    155 	.globl	C$Bestiary.c$41$1_0$105
                                    156 ;src\Bestiary.c:41: if (joypadCurrent & J_RIGHT)
      00004B CB 41            [ 8]  157 	bit	0, c
      00004D 28 28            [12]  158 	jr	Z, 00108$
                           00004F   159 	C$Bestiary.c$43$2_0$108	= .
                                    160 	.globl	C$Bestiary.c$43$2_0$108
                                    161 ;src\Bestiary.c:43: if (index + 1 <= 3)
      00004F FAr00r00         [16]  162 	ld	a, (#_index)
      000052 47               [ 4]  163 	ld	b, a
      000053 07               [ 4]  164 	rlca
      000054 9F               [ 4]  165 	sbc	a, a
      000055 68               [ 4]  166 	ld	l, b
                                    167 ;	spillPairReg hl
                                    168 ;	spillPairReg hl
      000056 67               [ 4]  169 	ld	h, a
                                    170 ;	spillPairReg hl
                                    171 ;	spillPairReg hl
      000057 23               [ 8]  172 	inc	hl
      000058 5C               [ 4]  173 	ld	e, h
      000059 16 00            [ 8]  174 	ld	d, #0x00
      00005B 3E 03            [ 8]  175 	ld	a, #0x03
      00005D BD               [ 4]  176 	cp	a, l
      00005E 3E 00            [ 8]  177 	ld	a, #0x00
      000060 9C               [ 4]  178 	sbc	a, h
      000061 CB 7B            [ 8]  179 	bit	7, e
      000063 28 07            [12]  180 	jr	Z, 00170$
      000065 CB 7A            [ 8]  181 	bit	7, d
      000067 20 08            [12]  182 	jr	NZ, 00171$
      000069 BF               [ 4]  183 	cp	a, a
      00006A 18 05            [12]  184 	jr	00171$
      00006C                        185 00170$:
      00006C CB 7A            [ 8]  186 	bit	7, d
      00006E 28 01            [12]  187 	jr	Z, 00171$
      000070 37               [ 4]  188 	scf
      000071                        189 00171$:
      000071 38 04            [12]  190 	jr	C, 00108$
                           000073   191 	C$Bestiary.c$45$3_0$109	= .
                                    192 	.globl	C$Bestiary.c$45$3_0$109
                                    193 ;src\Bestiary.c:45: index++;
      000073 21r00r00         [12]  194 	ld	hl, #_index
      000076 34               [12]  195 	inc	(hl)
      000077                        196 00108$:
                           000077   197 	C$Bestiary.c$48$1_0$105	= .
                                    198 	.globl	C$Bestiary.c$48$1_0$105
                                    199 ;src\Bestiary.c:48: if (joypadCurrent & J_START)
      000077 CB 79            [ 8]  200 	bit	7, c
      000079 28 03            [12]  201 	jr	Z, 00110$
                           00007B   202 	C$Bestiary.c$50$2_0$110	= .
                                    203 	.globl	C$Bestiary.c$50$2_0$110
                                    204 ;src\Bestiary.c:50: InvertColor();
      00007B CDr00r00         [24]  205 	call	_InvertColor
      00007E                        206 00110$:
                           00007E   207 	C$Bestiary.c$64$1_0$105	= .
                                    208 	.globl	C$Bestiary.c$64$1_0$105
                                    209 ;src\Bestiary.c:64: if (joypadCurrent & J_SELECT)
      00007E FAr00r00         [16]  210 	ld	a, (#_joypadCurrent)
      000081 CB 77            [ 8]  211 	bit	6, a
      000083 28 08            [12]  212 	jr	Z, 00112$
                           000085   213 	C$Bestiary.c$66$2_0$111	= .
                                    214 	.globl	C$Bestiary.c$66$2_0$111
                                    215 ;src\Bestiary.c:66: fadeToBlack(10);
      000085 3E 0A            [ 8]  216 	ld	a, #0x0a
      000087 CDr00r00         [24]  217 	call	_fadeToBlack
                           00008A   218 	C$Bestiary.c$67$2_0$111	= .
                                    219 	.globl	C$Bestiary.c$67$2_0$111
                                    220 ;src\Bestiary.c:67: return GAMETITLE;
      00008A 3E 01            [ 8]  221 	ld	a, #0x01
      00008C C9               [16]  222 	ret
      00008D                        223 00112$:
                           00008D   224 	C$Bestiary.c$69$1_0$105	= .
                                    225 	.globl	C$Bestiary.c$69$1_0$105
                                    226 ;src\Bestiary.c:69: if (index == 0) // JIM
      00008D FAr00r00         [16]  227 	ld	a, (#_index)
      000090 B7               [ 4]  228 	or	a, a
      000091 20 7B            [12]  229 	jr	NZ, 00119$
                           000093   230 	C$Bestiary.c$71$2_0$112	= .
                                    231 	.globl	C$Bestiary.c$71$2_0$112
                                    232 ;src\Bestiary.c:71: set_bkg_data(128, 79, Crow_Tiles); // init with crow monster
      000093 11r00r00         [12]  233 	ld	de, #_Crow_Tiles
      000096 D5               [16]  234 	push	de
      000097 21 80 4F         [12]  235 	ld	hl, #0x4f80
      00009A E5               [16]  236 	push	hl
      00009B CDr00r00         [24]  237 	call	_set_bkg_data
      00009E E8 04            [16]  238 	add	sp, #4
                           0000A0   239 	C$Bestiary.c$72$2_0$112	= .
                                    240 	.globl	C$Bestiary.c$72$2_0$112
                                    241 ;src\Bestiary.c:72: set_bkg_tiles(2, 4, Crow_MapWidth, Crow_MapHeight, Crow_Map); // draw Crow monster
      0000A0 11r00r00         [12]  242 	ld	de, #_Crow_Map
      0000A3 D5               [16]  243 	push	de
      0000A4 21 05 07         [12]  244 	ld	hl, #0x705
      0000A7 E5               [16]  245 	push	hl
      0000A8 21 02 04         [12]  246 	ld	hl, #0x402
      0000AB E5               [16]  247 	push	hl
      0000AC CDr00r00         [24]  248 	call	_set_bkg_tiles
      0000AF E8 06            [16]  249 	add	sp, #6
                           0000B1   250 	C$Bestiary.c$73$2_0$112	= .
                                    251 	.globl	C$Bestiary.c$73$2_0$112
                                    252 ;src\Bestiary.c:73: DrawNumber(4, 0, 0, 3);     // ID
      0000B1 3E 03            [ 8]  253 	ld	a, #0x03
      0000B3 F5               [16]  254 	push	af
      0000B4 33               [ 8]  255 	inc	sp
      0000B5 11 00 00         [12]  256 	ld	de, #0x0000
      0000B8 D5               [16]  257 	push	de
      0000B9 1E 00            [ 8]  258 	ld	e, #0x00
      0000BB 3E 04            [ 8]  259 	ld	a, #0x04
      0000BD CDr00r00         [24]  260 	call	_DrawNumber
                           0000C0   261 	C$Bestiary.c$75$2_0$112	= .
                                    262 	.globl	C$Bestiary.c$75$2_0$112
                                    263 ;src\Bestiary.c:75: DrawNumber(17, 2, 3, 1);    // ATTACK
      0000C0 3E 01            [ 8]  264 	ld	a, #0x01
      0000C2 F5               [16]  265 	push	af
      0000C3 33               [ 8]  266 	inc	sp
      0000C4 11 03 00         [12]  267 	ld	de, #0x0003
      0000C7 D5               [16]  268 	push	de
      0000C8 1E 02            [ 8]  269 	ld	e, #0x02
      0000CA 3E 11            [ 8]  270 	ld	a, #0x11
      0000CC CDr00r00         [24]  271 	call	_DrawNumber
                           0000CF   272 	C$Bestiary.c$76$2_0$112	= .
                                    273 	.globl	C$Bestiary.c$76$2_0$112
                                    274 ;src\Bestiary.c:76: DrawNumber(17, 4, 2, 1);    // DEFENSE
      0000CF 3E 01            [ 8]  275 	ld	a, #0x01
      0000D1 F5               [16]  276 	push	af
      0000D2 33               [ 8]  277 	inc	sp
      0000D3 11 02 00         [12]  278 	ld	de, #0x0002
      0000D6 D5               [16]  279 	push	de
      0000D7 1E 04            [ 8]  280 	ld	e, #0x04
      0000D9 3E 11            [ 8]  281 	ld	a, #0x11
      0000DB CDr00r00         [24]  282 	call	_DrawNumber
                           0000DE   283 	C$Bestiary.c$77$2_0$112	= .
                                    284 	.globl	C$Bestiary.c$77$2_0$112
                                    285 ;src\Bestiary.c:77: DrawNumber(17, 6, 1, 1);    // SPECIAL
      0000DE 3E 01            [ 8]  286 	ld	a, #0x01
      0000E0 F5               [16]  287 	push	af
      0000E1 33               [ 8]  288 	inc	sp
      0000E2 11 01 00         [12]  289 	ld	de, #0x0001
      0000E5 D5               [16]  290 	push	de
      0000E6 1E 06            [ 8]  291 	ld	e, #0x06
      0000E8 3E 11            [ 8]  292 	ld	a, #0x11
      0000EA CDr00r00         [24]  293 	call	_DrawNumber
                           0000ED   294 	C$Bestiary.c$78$2_0$112	= .
                                    295 	.globl	C$Bestiary.c$78$2_0$112
                                    296 ;src\Bestiary.c:78: DrawNumber(17, 8, 4, 1);    // SPEED
      0000ED 3E 01            [ 8]  297 	ld	a, #0x01
      0000EF F5               [16]  298 	push	af
      0000F0 33               [ 8]  299 	inc	sp
      0000F1 11 04 00         [12]  300 	ld	de, #0x0004
      0000F4 D5               [16]  301 	push	de
      0000F5 1E 08            [ 8]  302 	ld	e, #0x08
      0000F7 3E 11            [ 8]  303 	ld	a, #0x11
      0000F9 CDr00r00         [24]  304 	call	_DrawNumber
                           0000FC   305 	C$Bestiary.c$79$2_0$112	= .
                                    306 	.globl	C$Bestiary.c$79$2_0$112
                                    307 ;src\Bestiary.c:79: DrawNumber(17, 10, 5, 1);   // EXP.
      0000FC 3E 01            [ 8]  308 	ld	a, #0x01
      0000FE F5               [16]  309 	push	af
      0000FF 33               [ 8]  310 	inc	sp
      000100 11 05 00         [12]  311 	ld	de, #0x0005
      000103 D5               [16]  312 	push	de
      000104 1E 0A            [ 8]  313 	ld	e, #0x0a
      000106 3E 11            [ 8]  314 	ld	a, #0x11
      000108 CDr00r00         [24]  315 	call	_DrawNumber
      00010B C3r0Er02         [16]  316 	jp	00120$
      00010E                        317 00119$:
                           00010E   318 	C$Bestiary.c$81$1_0$105	= .
                                    319 	.globl	C$Bestiary.c$81$1_0$105
                                    320 ;src\Bestiary.c:81: else if (index == 1) // Gypsy
      00010E FAr00r00         [16]  321 	ld	a, (#_index)
      000111 3D               [ 4]  322 	dec	a
      000112 20 7B            [12]  323 	jr	NZ, 00116$
                           000114   324 	C$Bestiary.c$83$2_0$113	= .
                                    325 	.globl	C$Bestiary.c$83$2_0$113
                                    326 ;src\Bestiary.c:83: set_bkg_data(128, 79, GypsyTiles); 
      000114 11r00r00         [12]  327 	ld	de, #_GypsyTiles
      000117 D5               [16]  328 	push	de
      000118 21 80 4F         [12]  329 	ld	hl, #0x4f80
      00011B E5               [16]  330 	push	hl
      00011C CDr00r00         [24]  331 	call	_set_bkg_data
      00011F E8 04            [16]  332 	add	sp, #4
                           000121   333 	C$Bestiary.c$84$2_0$113	= .
                                    334 	.globl	C$Bestiary.c$84$2_0$113
                                    335 ;src\Bestiary.c:84: set_bkg_tiles(2, 4, Gypsy_MapWidth, Gypsy_MapHeight, Gypsy_Map); 
      000121 11r00r00         [12]  336 	ld	de, #_Gypsy_Map
      000124 D5               [16]  337 	push	de
      000125 21 06 07         [12]  338 	ld	hl, #0x706
      000128 E5               [16]  339 	push	hl
      000129 21 02 04         [12]  340 	ld	hl, #0x402
      00012C E5               [16]  341 	push	hl
      00012D CDr00r00         [24]  342 	call	_set_bkg_tiles
      000130 E8 06            [16]  343 	add	sp, #6
                           000132   344 	C$Bestiary.c$85$2_0$113	= .
                                    345 	.globl	C$Bestiary.c$85$2_0$113
                                    346 ;src\Bestiary.c:85: DrawNumber(4, 0, 1, 3);     // ID
      000132 3E 03            [ 8]  347 	ld	a, #0x03
      000134 F5               [16]  348 	push	af
      000135 33               [ 8]  349 	inc	sp
      000136 11 01 00         [12]  350 	ld	de, #0x0001
      000139 D5               [16]  351 	push	de
      00013A 1E 00            [ 8]  352 	ld	e, #0x00
      00013C 3E 04            [ 8]  353 	ld	a, #0x04
      00013E CDr00r00         [24]  354 	call	_DrawNumber
                           000141   355 	C$Bestiary.c$87$2_0$113	= .
                                    356 	.globl	C$Bestiary.c$87$2_0$113
                                    357 ;src\Bestiary.c:87: DrawNumber(17, 2, 2, 1);    // ATTACK
      000141 3E 01            [ 8]  358 	ld	a, #0x01
      000143 F5               [16]  359 	push	af
      000144 33               [ 8]  360 	inc	sp
      000145 11 02 00         [12]  361 	ld	de, #0x0002
      000148 D5               [16]  362 	push	de
      000149 1E 02            [ 8]  363 	ld	e, #0x02
      00014B 3E 11            [ 8]  364 	ld	a, #0x11
      00014D CDr00r00         [24]  365 	call	_DrawNumber
                           000150   366 	C$Bestiary.c$88$2_0$113	= .
                                    367 	.globl	C$Bestiary.c$88$2_0$113
                                    368 ;src\Bestiary.c:88: DrawNumber(17, 4, 2, 1);    // DEFENSE
      000150 3E 01            [ 8]  369 	ld	a, #0x01
      000152 F5               [16]  370 	push	af
      000153 33               [ 8]  371 	inc	sp
      000154 11 02 00         [12]  372 	ld	de, #0x0002
      000157 D5               [16]  373 	push	de
      000158 1E 04            [ 8]  374 	ld	e, #0x04
      00015A 3E 11            [ 8]  375 	ld	a, #0x11
      00015C CDr00r00         [24]  376 	call	_DrawNumber
                           00015F   377 	C$Bestiary.c$89$2_0$113	= .
                                    378 	.globl	C$Bestiary.c$89$2_0$113
                                    379 ;src\Bestiary.c:89: DrawNumber(17, 6, 3, 1);    // SPECIAL
      00015F 3E 01            [ 8]  380 	ld	a, #0x01
      000161 F5               [16]  381 	push	af
      000162 33               [ 8]  382 	inc	sp
      000163 11 03 00         [12]  383 	ld	de, #0x0003
      000166 D5               [16]  384 	push	de
      000167 1E 06            [ 8]  385 	ld	e, #0x06
      000169 3E 11            [ 8]  386 	ld	a, #0x11
      00016B CDr00r00         [24]  387 	call	_DrawNumber
                           00016E   388 	C$Bestiary.c$90$2_0$113	= .
                                    389 	.globl	C$Bestiary.c$90$2_0$113
                                    390 ;src\Bestiary.c:90: DrawNumber(17, 8, 2, 1);    // SPEED
      00016E 3E 01            [ 8]  391 	ld	a, #0x01
      000170 F5               [16]  392 	push	af
      000171 33               [ 8]  393 	inc	sp
      000172 11 02 00         [12]  394 	ld	de, #0x0002
      000175 D5               [16]  395 	push	de
      000176 1E 08            [ 8]  396 	ld	e, #0x08
      000178 3E 11            [ 8]  397 	ld	a, #0x11
      00017A CDr00r00         [24]  398 	call	_DrawNumber
                           00017D   399 	C$Bestiary.c$91$2_0$113	= .
                                    400 	.globl	C$Bestiary.c$91$2_0$113
                                    401 ;src\Bestiary.c:91: DrawNumber(17, 10, 7, 1);   // EXP.
      00017D 3E 01            [ 8]  402 	ld	a, #0x01
      00017F F5               [16]  403 	push	af
      000180 33               [ 8]  404 	inc	sp
      000181 11 07 00         [12]  405 	ld	de, #0x0007
      000184 D5               [16]  406 	push	de
      000185 1E 0A            [ 8]  407 	ld	e, #0x0a
      000187 3E 11            [ 8]  408 	ld	a, #0x11
      000189 CDr00r00         [24]  409 	call	_DrawNumber
      00018C C3r0Er02         [16]  410 	jp	00120$
      00018F                        411 00116$:
                           00018F   412 	C$Bestiary.c$93$1_0$105	= .
                                    413 	.globl	C$Bestiary.c$93$1_0$105
                                    414 ;src\Bestiary.c:93: else if (index == 2) // Wally
      00018F FAr00r00         [16]  415 	ld	a, (#_index)
      000192 D6 02            [ 8]  416 	sub	a, #0x02
      000194 20 78            [12]  417 	jr	NZ, 00120$
                           000196   418 	C$Bestiary.c$95$2_0$114	= .
                                    419 	.globl	C$Bestiary.c$95$2_0$114
                                    420 ;src\Bestiary.c:95: set_bkg_data(128, 79, WallyTiles); 
      000196 11r00r00         [12]  421 	ld	de, #_WallyTiles
      000199 D5               [16]  422 	push	de
      00019A 21 80 4F         [12]  423 	ld	hl, #0x4f80
      00019D E5               [16]  424 	push	hl
      00019E CDr00r00         [24]  425 	call	_set_bkg_data
      0001A1 E8 04            [16]  426 	add	sp, #4
                           0001A3   427 	C$Bestiary.c$96$2_0$114	= .
                                    428 	.globl	C$Bestiary.c$96$2_0$114
                                    429 ;src\Bestiary.c:96: set_bkg_tiles(2, 4, Wally_MapWidth, Wally_MapHeight, Wally_Map); 
      0001A3 11r00r00         [12]  430 	ld	de, #_Wally_Map
      0001A6 D5               [16]  431 	push	de
      0001A7 21 05 06         [12]  432 	ld	hl, #0x605
      0001AA E5               [16]  433 	push	hl
      0001AB 21 02 04         [12]  434 	ld	hl, #0x402
      0001AE E5               [16]  435 	push	hl
      0001AF CDr00r00         [24]  436 	call	_set_bkg_tiles
      0001B2 E8 06            [16]  437 	add	sp, #6
                           0001B4   438 	C$Bestiary.c$97$2_0$114	= .
                                    439 	.globl	C$Bestiary.c$97$2_0$114
                                    440 ;src\Bestiary.c:97: DrawNumber(4, 0, 2, 3);     // ID
      0001B4 3E 03            [ 8]  441 	ld	a, #0x03
      0001B6 F5               [16]  442 	push	af
      0001B7 33               [ 8]  443 	inc	sp
      0001B8 11 02 00         [12]  444 	ld	de, #0x0002
      0001BB D5               [16]  445 	push	de
      0001BC 1E 00            [ 8]  446 	ld	e, #0x00
      0001BE 3E 04            [ 8]  447 	ld	a, #0x04
      0001C0 CDr00r00         [24]  448 	call	_DrawNumber
                           0001C3   449 	C$Bestiary.c$99$2_0$114	= .
                                    450 	.globl	C$Bestiary.c$99$2_0$114
                                    451 ;src\Bestiary.c:99: DrawNumber(17, 2, 4, 1);    // ATTACK
      0001C3 3E 01            [ 8]  452 	ld	a, #0x01
      0001C5 F5               [16]  453 	push	af
      0001C6 33               [ 8]  454 	inc	sp
      0001C7 11 04 00         [12]  455 	ld	de, #0x0004
      0001CA D5               [16]  456 	push	de
      0001CB 1E 02            [ 8]  457 	ld	e, #0x02
      0001CD 3E 11            [ 8]  458 	ld	a, #0x11
      0001CF CDr00r00         [24]  459 	call	_DrawNumber
                           0001D2   460 	C$Bestiary.c$100$2_0$114	= .
                                    461 	.globl	C$Bestiary.c$100$2_0$114
                                    462 ;src\Bestiary.c:100: DrawNumber(17, 4, 4, 1);    // DEFENSE
      0001D2 3E 01            [ 8]  463 	ld	a, #0x01
      0001D4 F5               [16]  464 	push	af
      0001D5 33               [ 8]  465 	inc	sp
      0001D6 11 04 00         [12]  466 	ld	de, #0x0004
      0001D9 D5               [16]  467 	push	de
      0001DA 1E 04            [ 8]  468 	ld	e, #0x04
      0001DC 3E 11            [ 8]  469 	ld	a, #0x11
      0001DE CDr00r00         [24]  470 	call	_DrawNumber
                           0001E1   471 	C$Bestiary.c$101$2_0$114	= .
                                    472 	.globl	C$Bestiary.c$101$2_0$114
                                    473 ;src\Bestiary.c:101: DrawNumber(17, 6, 4, 1);    // SPECIAL
      0001E1 3E 01            [ 8]  474 	ld	a, #0x01
      0001E3 F5               [16]  475 	push	af
      0001E4 33               [ 8]  476 	inc	sp
      0001E5 11 04 00         [12]  477 	ld	de, #0x0004
      0001E8 D5               [16]  478 	push	de
      0001E9 1E 06            [ 8]  479 	ld	e, #0x06
      0001EB 3E 11            [ 8]  480 	ld	a, #0x11
      0001ED CDr00r00         [24]  481 	call	_DrawNumber
                           0001F0   482 	C$Bestiary.c$102$2_0$114	= .
                                    483 	.globl	C$Bestiary.c$102$2_0$114
                                    484 ;src\Bestiary.c:102: DrawNumber(17, 8, 4, 1);    // SPEED
      0001F0 3E 01            [ 8]  485 	ld	a, #0x01
      0001F2 F5               [16]  486 	push	af
      0001F3 33               [ 8]  487 	inc	sp
      0001F4 11 04 00         [12]  488 	ld	de, #0x0004
      0001F7 D5               [16]  489 	push	de
      0001F8 1E 08            [ 8]  490 	ld	e, #0x08
      0001FA 3E 11            [ 8]  491 	ld	a, #0x11
      0001FC CDr00r00         [24]  492 	call	_DrawNumber
                           0001FF   493 	C$Bestiary.c$103$2_0$114	= .
                                    494 	.globl	C$Bestiary.c$103$2_0$114
                                    495 ;src\Bestiary.c:103: DrawNumber(16, 10, 12, 1);   // EXP.
      0001FF 3E 01            [ 8]  496 	ld	a, #0x01
      000201 F5               [16]  497 	push	af
      000202 33               [ 8]  498 	inc	sp
      000203 11 0C 00         [12]  499 	ld	de, #0x000c
      000206 D5               [16]  500 	push	de
      000207 1E 0A            [ 8]  501 	ld	e, #0x0a
      000209 3E 10            [ 8]  502 	ld	a, #0x10
      00020B CDr00r00         [24]  503 	call	_DrawNumber
      00020E                        504 00120$:
                           00020E   505 	C$Bestiary.c$105$1_0$105	= .
                                    506 	.globl	C$Bestiary.c$105$1_0$105
                                    507 ;src\Bestiary.c:105: return BESTIARY;
      00020E 3E 04            [ 8]  508 	ld	a, #0x04
                           000210   509 	C$Bestiary.c$106$1_0$105	= .
                                    510 	.globl	C$Bestiary.c$106$1_0$105
                                    511 ;src\Bestiary.c:106: }
                           000210   512 	C$Bestiary.c$106$1_0$105	= .
                                    513 	.globl	C$Bestiary.c$106$1_0$105
                           000210   514 	XG$BestiaryUpdate$0$0	= .
                                    515 	.globl	XG$BestiaryUpdate$0$0
      000210 C9               [16]  516 	ret
                                    517 	.area _CODE
                                    518 	.area _INITIALIZER
                           000000   519 FBestiary$__xinit_index$0_0$0 == .
      000000                        520 __xinit__index:
      000000 00                     521 	.db #0x00	;  0
                           000001   522 FBestiary$__xinit_invert$0_0$0 == .
      000001                        523 __xinit__invert:
      000001 00                     524 	.db #0x00	; 0
                                    525 	.area _CABS (ABS)
