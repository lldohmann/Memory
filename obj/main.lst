                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.2 #13350 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _init_gfx
                                     13 	.globl _strcpy
                                     14 	.globl _set_sprite_data
                                     15 	.globl _set_bkg_submap
                                     16 	.globl _set_bkg_data
                                     17 	.globl _wait_vbl_done
                                     18 ;--------------------------------------------------------
                                     19 ; special function registers
                                     20 ;--------------------------------------------------------
                                     21 ;--------------------------------------------------------
                                     22 ; ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area _DATA
                                     25 ;--------------------------------------------------------
                                     26 ; ram data
                                     27 ;--------------------------------------------------------
                                     28 	.area _INITIALIZED
                                     29 ;--------------------------------------------------------
                                     30 ; absolute external ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area _DABS (ABS)
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area _HOME
                                     37 	.area _GSINIT
                                     38 	.area _GSFINAL
                                     39 	.area _GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area _HOME
                                     44 	.area _HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area _CODE
                                     49 ;src\main.c:12: void init_gfx() {
                                     50 ;	---------------------------------
                                     51 ; Function init_gfx
                                     52 ; ---------------------------------
      000000                         53 _init_gfx::
                                     54 ;src\main.c:14: set_bkg_data(128, 78, IndoorTiles);
      000000 11r00r00         [12]   55 	ld	de, #_IndoorTiles
      000003 D5               [16]   56 	push	de
      000004 21 80 4E         [12]   57 	ld	hl, #0x4e80
      000007 E5               [16]   58 	push	hl
      000008 CDr00r00         [24]   59 	call	_set_bkg_data
      00000B E8 04            [16]   60 	add	sp, #4
                                     61 ;src\main.c:15: set_bkg_based_submap(0, 0, MapWidth, MapHeight, Map, MapWidth, 128);
                                     62 ;C:/gbdk/include/gb/gb.h:1148: _submap_tile_offset = base_tile;
      00000D 21r00r00         [12]   63 	ld	hl, #__submap_tile_offset
      000010 36 80            [12]   64 	ld	(hl), #0x80
                                     65 ;C:/gbdk/include/gb/gb.h:1149: set_bkg_submap(x, y, w, h, map, map_w);
      000012 3E 1F            [ 8]   66 	ld	a, #0x1f
      000014 F5               [16]   67 	push	af
      000015 33               [ 8]   68 	inc	sp
      000016 11r00r00         [12]   69 	ld	de, #_Map
      000019 D5               [16]   70 	push	de
      00001A 21 1F 1F         [12]   71 	ld	hl, #0x1f1f
      00001D E5               [16]   72 	push	hl
      00001E AF               [ 4]   73 	xor	a, a
      00001F 0F               [ 4]   74 	rrca
      000020 F5               [16]   75 	push	af
      000021 CDr00r00         [24]   76 	call	_set_bkg_submap
      000024 E8 07            [16]   77 	add	sp, #7
                                     78 ;C:/gbdk/include/gb/gb.h:1150: _submap_tile_offset = 0;
      000026 21r00r00         [12]   79 	ld	hl, #__submap_tile_offset
      000029 36 00            [12]   80 	ld	(hl), #0x00
                                     81 ;src\main.c:19: set_sprite_data(0, 128, Cast_Tiles);
      00002B 11r00r00         [12]   82 	ld	de, #_Cast_Tiles
      00002E D5               [16]   83 	push	de
      00002F 21 00 80         [12]   84 	ld	hl, #0x8000
      000032 E5               [16]   85 	push	hl
      000033 CDr00r00         [24]   86 	call	_set_sprite_data
      000036 E8 04            [16]   87 	add	sp, #4
                                     88 ;src\main.c:21: SHOW_BKG;
      000038 F0r00            [12]   89 	ldh	a, (_LCDC_REG + 0)
      00003A F6 01            [ 8]   90 	or	a, #0x01
      00003C E0r00            [12]   91 	ldh	(_LCDC_REG + 0), a
                                     92 ;src\main.c:22: SHOW_SPRITES;
      00003E F0r00            [12]   93 	ldh	a, (_LCDC_REG + 0)
      000040 F6 02            [ 8]   94 	or	a, #0x02
      000042 E0r00            [12]   95 	ldh	(_LCDC_REG + 0), a
                                     96 ;src\main.c:23: }
      000044 C9               [16]   97 	ret
                                     98 ;src\main.c:42: void main(void)
                                     99 ;	---------------------------------
                                    100 ; Function main
                                    101 ; ---------------------------------
      000045                        102 _main::
      000045 E8 ED            [16]  103 	add	sp, #-19
                                    104 ;src\main.c:44: init_gfx();
      000047 CDr00r00         [24]  105 	call	_init_gfx
                                    106 ;src\main.c:47: strcpy(player.name, "Mouse");
      00004A 11r7Ar00         [12]  107 	ld	de, #___str_0+0
      00004D F8 00            [12]  108 	ldhl	sp,	#0
      00004F 4D               [ 4]  109 	ld	c, l
      000050 44               [ 4]  110 	ld	b, h
      000051 D5               [16]  111 	push	de
      000052 C5               [16]  112 	push	bc
      000053 CDr00r00         [24]  113 	call	_strcpy
      000056 E8 04            [16]  114 	add	sp, #4
                                    115 ;src\main.c:48: player.health = 20;
      000058 F8 07            [12]  116 	ldhl	sp,	#7
                                    117 ;src\main.c:49: player.health_Max = 20;
                                    118 ;src\main.c:50: player.psychic = 14;
      00005A 3E 14            [ 8]  119 	ld	a,#0x14
      00005C 22               [ 8]  120 	ld	(hl+),a
      00005D 22               [ 8]  121 	ld	(hl+), a
                                    122 ;src\main.c:51: player.psychic_Max = 14;
      00005E 3E 0E            [ 8]  123 	ld	a, #0x0e
      000060 22               [ 8]  124 	ld	(hl+), a
      000061 36 0E            [12]  125 	ld	(hl), #0x0e
                                    126 ;src\main.c:52: player.offense = 8;
      000063 F8 0F            [12]  127 	ldhl	sp,	#15
                                    128 ;src\main.c:53: player.defense = 5;
      000065 3E 08            [ 8]  129 	ld	a, #0x08
      000067 22               [ 8]  130 	ld	(hl+), a
                                    131 ;src\main.c:54: player.luck = 11;
      000068 3E 05            [ 8]  132 	ld	a, #0x05
      00006A 22               [ 8]  133 	ld	(hl+), a
      00006B 36 0B            [12]  134 	ld	(hl), #0x0b
                                    135 ;src\main.c:55: player.experience = 0;
      00006D AF               [ 4]  136 	xor	a, a
      00006E F8 0B            [12]  137 	ldhl	sp,	#11
      000070 22               [ 8]  138 	ld	(hl+), a
      000071 77               [ 8]  139 	ld	(hl), a
                                    140 ;src\main.c:59: while(1) {
      000072                        141 00102$:
                                    142 ;src\main.c:66: wait_vbl_done();
      000072 CDr00r00         [24]  143 	call	_wait_vbl_done
      000075 18 FB            [12]  144 	jr	00102$
                                    145 ;src\main.c:68: }
      000077 E8 13            [16]  146 	add	sp, #19
      000079 C9               [16]  147 	ret
      00007A                        148 ___str_0:
      00007A 4D 6F 75 73 65         149 	.ascii "Mouse"
      00007F 00                     150 	.db 0x00
                                    151 	.area _CODE
                                    152 	.area _INITIALIZER
                                    153 	.area _CABS (ABS)
