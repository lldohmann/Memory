                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.2 #13350 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _GameJohnDoeUpdate
                                     13 	.globl _GameJohnDoeSetup
                                     14 	.globl _CoreGameLoopUpdate
                                     15 	.globl _CoreGameLoopSetup
                                     16 	.globl _GameTitleUpdate
                                     17 	.globl _GameTitleSetup
                                     18 ;--------------------------------------------------------
                                     19 ; special function registers
                                     20 ;--------------------------------------------------------
                                     21 ;--------------------------------------------------------
                                     22 ; ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area _DATA
                                     25 ;--------------------------------------------------------
                                     26 ; ram data
                                     27 ;--------------------------------------------------------
                                     28 	.area _INITIALIZED
                                     29 ;--------------------------------------------------------
                                     30 ; absolute external ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area _DABS (ABS)
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area _HOME
                                     37 	.area _GSINIT
                                     38 	.area _GSFINAL
                                     39 	.area _GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area _HOME
                                     44 	.area _HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area _CODE
                           000000    49 	G$main$0$0	= .
                                     50 	.globl	G$main$0$0
                           000000    51 	C$main.c$7$0_0$104	= .
                                     52 	.globl	C$main.c$7$0_0$104
                                     53 ;src\main.c:7: void main(void)
                                     54 ;	---------------------------------
                                     55 ; Function main
                                     56 ; ---------------------------------
      000000                         57 _main::
                           000000    58 	C$main.c$9$2_0$104	= .
                                     59 	.globl	C$main.c$9$2_0$104
                                     60 ;src\main.c:9: uint8_t currentGameState = GAMEFIRSTLOAD;
                           000000    61 	C$main.c$10$2_0$104	= .
                                     62 	.globl	C$main.c$10$2_0$104
                                     63 ;src\main.c:10: uint8_t nextGameState = GAMETITLE;
      000000 01 00 01         [12]   64 	ld	bc, #0x100
                           000003    65 	C$main.c$13$1_0$104	= .
                                     66 	.globl	C$main.c$13$1_0$104
                                     67 ;src\main.c:13: while(1) { 
      000003                         68 00120$:
                           000003    69 	C$main.c$17$2_0$105	= .
                                     70 	.globl	C$main.c$17$2_0$105
                                     71 ;src\main.c:17: if (nextGameState != currentGameState)
      000003 79               [ 4]   72 	ld	a, c
      000004 90               [ 4]   73 	sub	a, b
      000005 28 22            [12]   74 	jr	Z, 00110$
                           000007    75 	C$main.c$19$3_0$106	= .
                                     76 	.globl	C$main.c$19$3_0$106
                                     77 ;src\main.c:19: currentGameState = nextGameState;
      000007 48               [ 4]   78 	ld	c, b
                           000008    79 	C$main.c$21$3_0$106	= .
                                     80 	.globl	C$main.c$21$3_0$106
                                     81 ;src\main.c:21: if (currentGameState == GAMETITLE) GameTitleSetup();
      000008 78               [ 4]   82 	ld	a, b
      000009 3D               [ 4]   83 	dec	a
      00000A 20 07            [12]   84 	jr	NZ, 00107$
      00000C C5               [16]   85 	push	bc
      00000D CDr00r00         [24]   86 	call	_GameTitleSetup
      000010 C1               [12]   87 	pop	bc
      000011 18 16            [12]   88 	jr	00110$
      000013                         89 00107$:
                           000013    90 	C$main.c$22$3_0$106	= .
                                     91 	.globl	C$main.c$22$3_0$106
                                     92 ;src\main.c:22: else if (currentGameState == COREGAMELOOP) CoreGameLoopSetup();
      000013 78               [ 4]   93 	ld	a, b
      000014 D6 02            [ 8]   94 	sub	a, #0x02
      000016 20 07            [12]   95 	jr	NZ, 00104$
      000018 C5               [16]   96 	push	bc
      000019 CDr00r00         [24]   97 	call	_CoreGameLoopSetup
      00001C C1               [12]   98 	pop	bc
      00001D 18 0A            [12]   99 	jr	00110$
      00001F                        100 00104$:
                           00001F   101 	C$main.c$23$3_0$106	= .
                                    102 	.globl	C$main.c$23$3_0$106
                                    103 ;src\main.c:23: else if (currentGameState == GAMEJOHNDOE) GameJohnDoeSetup();
      00001F 78               [ 4]  104 	ld	a, b
      000020 D6 03            [ 8]  105 	sub	a, #0x03
      000022 20 05            [12]  106 	jr	NZ, 00110$
      000024 C5               [16]  107 	push	bc
      000025 CDr00r00         [24]  108 	call	_GameJohnDoeSetup
      000028 C1               [12]  109 	pop	bc
      000029                        110 00110$:
                           000029   111 	C$main.c$25$2_0$105	= .
                                    112 	.globl	C$main.c$25$2_0$105
                                    113 ;src\main.c:25: if (currentGameState == GAMETITLE) nextGameState = GameTitleUpdate();
      000029 79               [ 4]  114 	ld	a, c
      00002A 3D               [ 4]  115 	dec	a
      00002B 20 08            [12]  116 	jr	NZ, 00117$
      00002D C5               [16]  117 	push	bc
      00002E CDr00r00         [24]  118 	call	_GameTitleUpdate
      000031 C1               [12]  119 	pop	bc
      000032 47               [ 4]  120 	ld	b, a
      000033 18 CE            [12]  121 	jr	00120$
      000035                        122 00117$:
                           000035   123 	C$main.c$26$2_0$105	= .
                                    124 	.globl	C$main.c$26$2_0$105
                                    125 ;src\main.c:26: else if (currentGameState == COREGAMELOOP) nextGameState = CoreGameLoopUpdate();
      000035 79               [ 4]  126 	ld	a, c
      000036 D6 02            [ 8]  127 	sub	a, #0x02
      000038 20 08            [12]  128 	jr	NZ, 00114$
      00003A C5               [16]  129 	push	bc
      00003B CDr00r00         [24]  130 	call	_CoreGameLoopUpdate
      00003E C1               [12]  131 	pop	bc
      00003F 47               [ 4]  132 	ld	b, a
      000040 18 C1            [12]  133 	jr	00120$
      000042                        134 00114$:
                           000042   135 	C$main.c$27$2_0$105	= .
                                    136 	.globl	C$main.c$27$2_0$105
                                    137 ;src\main.c:27: else if (currentGameState == GAMEJOHNDOE) nextGameState = GameJohnDoeUpdate();
      000042 79               [ 4]  138 	ld	a, c
      000043 D6 03            [ 8]  139 	sub	a, #0x03
      000045 20 BC            [12]  140 	jr	NZ, 00120$
      000047 C5               [16]  141 	push	bc
      000048 CDr00r00         [24]  142 	call	_GameJohnDoeUpdate
      00004B C1               [12]  143 	pop	bc
      00004C 47               [ 4]  144 	ld	b, a
                           00004D   145 	C$main.c$30$1_0$104	= .
                                    146 	.globl	C$main.c$30$1_0$104
                                    147 ;src\main.c:30: }
                           00004D   148 	C$main.c$30$1_0$104	= .
                                    149 	.globl	C$main.c$30$1_0$104
                           00004D   150 	XG$main$0$0	= .
                                    151 	.globl	XG$main$0$0
      00004D 18 B4            [12]  152 	jr	00120$
                                    153 	.area _CODE
                                    154 	.area _INITIALIZER
                                    155 	.area _CABS (ABS)
