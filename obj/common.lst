                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.2 #13350 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module common
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _ResetColor
                                     12 	.globl _InvertColor
                                     13 	.globl _fadeFromWhite
                                     14 	.globl _fadeToWhite
                                     15 	.globl _fadeFromBlack
                                     16 	.globl _fadeToBlack
                                     17 	.globl _DrawTextWindow
                                     18 	.globl _DrawText
                                     19 	.globl _DrawNumberWindow
                                     20 	.globl _DrawNumber
                                     21 	.globl _performantdelay
                                     22 	.globl _strlen
                                     23 	.globl _uitoa
                                     24 	.globl _get_win_xy_addr
                                     25 	.globl _get_bkg_xy_addr
                                     26 	.globl _set_vram_byte
                                     27 	.globl _wait_vbl_done
                                     28 	.globl _index
                                     29 	.globl _joypadCurrent
                                     30 	.globl _joypadPrevious
                                     31 ;--------------------------------------------------------
                                     32 ; special function registers
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area _DATA
                                     38 ;--------------------------------------------------------
                                     39 ; ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area _INITIALIZED
                           000000    42 G$joypadPrevious$0_0$0==.
      000000                         43 _joypadPrevious::
      000000                         44 	.ds 1
                           000001    45 G$joypadCurrent$0_0$0==.
      000001                         46 _joypadCurrent::
      000001                         47 	.ds 1
                           000002    48 G$index$0_0$0==.
      000002                         49 _index::
      000002                         50 	.ds 1
                                     51 ;--------------------------------------------------------
                                     52 ; absolute external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area _DABS (ABS)
                                     55 ;--------------------------------------------------------
                                     56 ; global & static initialisations
                                     57 ;--------------------------------------------------------
                                     58 	.area _HOME
                                     59 	.area _GSINIT
                                     60 	.area _GSFINAL
                                     61 	.area _GSINIT
                                     62 ;--------------------------------------------------------
                                     63 ; Home
                                     64 ;--------------------------------------------------------
                                     65 	.area _HOME
                                     66 	.area _HOME
                                     67 ;--------------------------------------------------------
                                     68 ; code
                                     69 ;--------------------------------------------------------
                                     70 	.area _CODE
                           000000    71 	G$performantdelay$0$0	= .
                                     72 	.globl	G$performantdelay$0$0
                           000000    73 	C$common.c$13$0_0$136	= .
                                     74 	.globl	C$common.c$13$0_0$136
                                     75 ;src\common.c:13: void performantdelay(uint8_t numloops)
                                     76 ;	---------------------------------
                                     77 ; Function performantdelay
                                     78 ; ---------------------------------
      000000                         79 _performantdelay::
      000000 4F               [ 4]   80 	ld	c, a
                           000001    81 	C$common.c$15$2_0$136	= .
                                     82 	.globl	C$common.c$15$2_0$136
                                     83 ;src\common.c:15: for (uint8_t i = 0; i < numloops; i++)
      000001 06 00            [ 8]   84 	ld	b, #0x00
      000003                         85 00103$:
      000003 78               [ 4]   86 	ld	a, b
      000004 91               [ 4]   87 	sub	a, c
      000005 D0               [20]   88 	ret	NC
                           000006    89 	C$common.c$17$3_0$137	= .
                                     90 	.globl	C$common.c$17$3_0$137
                                     91 ;src\common.c:17: wait_vbl_done();
      000006 CDr00r00         [24]   92 	call	_wait_vbl_done
                           000009    93 	C$common.c$15$2_0$136	= .
                                     94 	.globl	C$common.c$15$2_0$136
                                     95 ;src\common.c:15: for (uint8_t i = 0; i < numloops; i++)
      000009 04               [ 4]   96 	inc	b
                           00000A    97 	C$common.c$19$2_0$136	= .
                                     98 	.globl	C$common.c$19$2_0$136
                                     99 ;src\common.c:19: }
                           00000A   100 	C$common.c$19$2_0$136	= .
                                    101 	.globl	C$common.c$19$2_0$136
                           00000A   102 	XG$performantdelay$0$0	= .
                                    103 	.globl	XG$performantdelay$0$0
      00000A 18 F7            [12]  104 	jr	00103$
                           00000C   105 	G$DrawNumber$0$0	= .
                                    106 	.globl	G$DrawNumber$0$0
                           00000C   107 	C$common.c$22$2_0$139	= .
                                    108 	.globl	C$common.c$22$2_0$139
                                    109 ;src\common.c:22: void DrawNumber(uint8_t x, uint8_t y, uint16_t number, uint8_t digits)
                                    110 ;	---------------------------------
                                    111 ; Function DrawNumber
                                    112 ; ---------------------------------
      00000C                        113 _DrawNumber::
      00000C E8 EC            [16]  114 	add	sp, #-20
      00000E F8 10            [12]  115 	ldhl	sp,	#16
      000010 32               [ 8]  116 	ld	(hl-), a
      000011 73               [ 8]  117 	ld	(hl), e
                           000012   118 	C$common.c$24$2_0$139	= .
                                    119 	.globl	C$common.c$24$2_0$139
                                    120 ;src\common.c:24: unsigned char buffer[8]={'0', '0', '0', '0', '0', '0', '0', '0'};
      000012 F8 00            [12]  121 	ldhl	sp,	#0
      000014 3E 30            [ 8]  122 	ld	a,#0x30
      000016 22               [ 8]  123 	ld	(hl+),a
      000017 22               [ 8]  124 	ld	(hl+), a
      000018 3E 30            [ 8]  125 	ld	a,#0x30
      00001A 22               [ 8]  126 	ld	(hl+),a
      00001B 22               [ 8]  127 	ld	(hl+), a
      00001C 3E 30            [ 8]  128 	ld	a,#0x30
      00001E 22               [ 8]  129 	ld	(hl+),a
      00001F 22               [ 8]  130 	ld	(hl+), a
      000020 3E 30            [ 8]  131 	ld	a, #0x30
      000022 22               [ 8]  132 	ld	(hl+), a
      000023 36 30            [12]  133 	ld	(hl), #0x30
                           000025   134 	C$common.c$27$1_0$139	= .
                                    135 	.globl	C$common.c$27$1_0$139
                                    136 ;src\common.c:27: uitoa(number, buffer, 10);
      000025 F8 16            [12]  137 	ldhl	sp,	#22
      000027 7E               [ 8]  138 	ld	a, (hl)
      000028 F8 12            [12]  139 	ldhl	sp,	#18
      00002A 77               [ 8]  140 	ld	(hl), a
      00002B F8 17            [12]  141 	ldhl	sp,	#23
      00002D 7E               [ 8]  142 	ld	a, (hl)
      00002E F8 13            [12]  143 	ldhl	sp,	#19
      000030 77               [ 8]  144 	ld	(hl), a
      000031 3E 0A            [ 8]  145 	ld	a, #0x0a
      000033 F5               [16]  146 	push	af
      000034 33               [ 8]  147 	inc	sp
      000035 21 01 00         [12]  148 	ld	hl, #1
      000038 39               [ 8]  149 	add	hl, sp
      000039 E5               [16]  150 	push	hl
      00003A F8 15            [12]  151 	ldhl	sp,	#21
      00003C 2A               [ 8]  152 	ld	a, (hl+)
      00003D 5F               [ 4]  153 	ld	e, a
      00003E 56               [ 8]  154 	ld	d, (hl)
      00003F D5               [16]  155 	push	de
      000040 CDr00r00         [24]  156 	call	_uitoa
      000043 E8 05            [16]  157 	add	sp, #5
                           000045   158 	C$common.c$30$1_1$140	= .
                                    159 	.globl	C$common.c$30$1_1$140
                                    160 ;src\common.c:30: uint8_t *vramAddr = get_bkg_xy_addr(x,y); 
      000045 F8 0F            [12]  161 	ldhl	sp,	#15
      000047 2A               [ 8]  162 	ld	a, (hl+)
      000048 57               [ 4]  163 	ld	d, a
      000049 5E               [ 8]  164 	ld	e, (hl)
      00004A D5               [16]  165 	push	de
      00004B CDr00r00         [24]  166 	call	_get_bkg_xy_addr
      00004E E1               [12]  167 	pop	hl
      00004F F8 12            [12]  168 	ldhl	sp,	#18
      000051 7B               [ 4]  169 	ld	a, e
      000052 22               [ 8]  170 	ld	(hl+), a
      000053 72               [ 8]  171 	ld	(hl), d
      000054 F8 12            [12]  172 	ldhl	sp,	#18
      000056 7E               [ 8]  173 	ld	a, (hl)
      000057 F8 0D            [12]  174 	ldhl	sp,	#13
      000059 77               [ 8]  175 	ld	(hl), a
      00005A F8 13            [12]  176 	ldhl	sp,	#19
      00005C 7E               [ 8]  177 	ld	a, (hl)
      00005D F8 0E            [12]  178 	ldhl	sp,	#14
      00005F 77               [ 8]  179 	ld	(hl), a
                           000060   180 	C$common.c$33$1_1$140	= .
                                    181 	.globl	C$common.c$33$1_1$140
                                    182 ;src\common.c:33: uint8_t len = strlen(buffer);
      000060 21 00 00         [12]  183 	ld	hl, #0
      000063 39               [ 8]  184 	add	hl, sp
      000064 E5               [16]  185 	push	hl
      000065 CDr00r00         [24]  186 	call	_strlen
      000068 E1               [12]  187 	pop	hl
      000069 F8 12            [12]  188 	ldhl	sp,	#18
      00006B 7B               [ 4]  189 	ld	a, e
      00006C 22               [ 8]  190 	ld	(hl+), a
      00006D 72               [ 8]  191 	ld	(hl), d
      00006E F8 12            [12]  192 	ldhl	sp,	#18
      000070 7E               [ 8]  193 	ld	a, (hl)
      000071 F8 08            [12]  194 	ldhl	sp,	#8
      000073 77               [ 8]  195 	ld	(hl), a
                           000074   196 	C$common.c$38$2_1$139	= .
                                    197 	.globl	C$common.c$38$2_1$139
                                    198 ;src\common.c:38: for (uint8_t i=0; i<digits-len;i++)
      000074 F8 0D            [12]  199 	ldhl	sp,	#13
      000076 7E               [ 8]  200 	ld	a, (hl)
      000077 F8 11            [12]  201 	ldhl	sp,	#17
      000079 77               [ 8]  202 	ld	(hl), a
      00007A F8 0E            [12]  203 	ldhl	sp,	#14
      00007C 7E               [ 8]  204 	ld	a, (hl)
      00007D F8 12            [12]  205 	ldhl	sp,	#18
      00007F 22               [ 8]  206 	ld	(hl+), a
      000080 36 00            [12]  207 	ld	(hl), #0x00
      000082                        208 00104$:
      000082 F8 18            [12]  209 	ldhl	sp,	#24
      000084 7E               [ 8]  210 	ld	a, (hl)
      000085 F8 09            [12]  211 	ldhl	sp,	#9
      000087 22               [ 8]  212 	ld	(hl+), a
      000088 AF               [ 4]  213 	xor	a, a
      000089 32               [ 8]  214 	ld	(hl-), a
      00008A 2B               [ 8]  215 	dec	hl
      00008B 7E               [ 8]  216 	ld	a, (hl)
      00008C F8 0B            [12]  217 	ldhl	sp,	#11
      00008E 22               [ 8]  218 	ld	(hl+), a
      00008F AF               [ 4]  219 	xor	a, a
      000090 32               [ 8]  220 	ld	(hl-), a
      000091 2B               [ 8]  221 	dec	hl
      000092 2B               [ 8]  222 	dec	hl
      000093 2A               [ 8]  223 	ld	a, (hl+)
      000094 5F               [ 4]  224 	ld	e, a
      000095 2A               [ 8]  225 	ld	a, (hl+)
      000096 57               [ 4]  226 	ld	d, a
      000097 2A               [ 8]  227 	ld	a,	(hl+)
      000098 66               [ 8]  228 	ld	h, (hl)
      000099 6F               [ 4]  229 	ld	l, a
      00009A 7B               [ 4]  230 	ld	a, e
      00009B 95               [ 4]  231 	sub	a, l
      00009C 5F               [ 4]  232 	ld	e, a
      00009D 7A               [ 4]  233 	ld	a, d
      00009E 9C               [ 4]  234 	sbc	a, h
      00009F F8 0E            [12]  235 	ldhl	sp,	#14
      0000A1 32               [ 8]  236 	ld	(hl-), a
      0000A2 73               [ 8]  237 	ld	(hl), e
      0000A3 F8 13            [12]  238 	ldhl	sp,	#19
      0000A5 4E               [ 8]  239 	ld	c, (hl)
      0000A6 06 00            [ 8]  240 	ld	b, #0x00
      0000A8 F8 0D            [12]  241 	ldhl	sp,	#13
      0000AA 79               [ 4]  242 	ld	a, c
      0000AB 96               [ 8]  243 	sub	a, (hl)
      0000AC 23               [ 8]  244 	inc	hl
      0000AD 78               [ 4]  245 	ld	a, b
      0000AE 9E               [ 8]  246 	sbc	a, (hl)
      0000AF 78               [ 4]  247 	ld	a, b
      0000B0 57               [ 4]  248 	ld	d, a
      0000B1 CB 7E            [12]  249 	bit	7, (hl)
      0000B3 28 07            [12]  250 	jr	Z, 00133$
      0000B5 CB 7A            [ 8]  251 	bit	7, d
      0000B7 20 08            [12]  252 	jr	NZ, 00134$
      0000B9 BF               [ 4]  253 	cp	a, a
      0000BA 18 05            [12]  254 	jr	00134$
      0000BC                        255 00133$:
      0000BC CB 7A            [ 8]  256 	bit	7, d
      0000BE 28 01            [12]  257 	jr	Z, 00134$
      0000C0 37               [ 4]  258 	scf
      0000C1                        259 00134$:
      0000C1 30 27            [12]  260 	jr	NC, 00101$
                           0000C3   261 	C$common.c$40$3_1$142	= .
                                    262 	.globl	C$common.c$40$3_1$142
                                    263 ;src\common.c:40: set_vram_byte(vramAddr++, 283);
      0000C3 F8 11            [12]  264 	ldhl	sp,	#17
      0000C5 7E               [ 8]  265 	ld	a, (hl)
      0000C6 F8 0D            [12]  266 	ldhl	sp,	#13
      0000C8 77               [ 8]  267 	ld	(hl), a
      0000C9 F8 12            [12]  268 	ldhl	sp,	#18
      0000CB 7E               [ 8]  269 	ld	a, (hl)
      0000CC F8 0E            [12]  270 	ldhl	sp,	#14
      0000CE 77               [ 8]  271 	ld	(hl), a
      0000CF F8 11            [12]  272 	ldhl	sp,	#17
      0000D1 34               [12]  273 	inc	(hl)
      0000D2 20 02            [12]  274 	jr	NZ, 00135$
      0000D4 23               [ 8]  275 	inc	hl
      0000D5 34               [12]  276 	inc	(hl)
      0000D6                        277 00135$:
      0000D6 3E 1B            [ 8]  278 	ld	a, #0x1b
      0000D8 F5               [16]  279 	push	af
      0000D9 33               [ 8]  280 	inc	sp
      0000DA F8 0E            [12]  281 	ldhl	sp,	#14
      0000DC 2A               [ 8]  282 	ld	a, (hl+)
      0000DD 5F               [ 4]  283 	ld	e, a
      0000DE 56               [ 8]  284 	ld	d, (hl)
      0000DF D5               [16]  285 	push	de
      0000E0 CDr00r00         [24]  286 	call	_set_vram_byte
      0000E3 E8 03            [16]  287 	add	sp, #3
                           0000E5   288 	C$common.c$38$2_1$141	= .
                                    289 	.globl	C$common.c$38$2_1$141
                                    290 ;src\common.c:38: for (uint8_t i=0; i<digits-len;i++)
      0000E5 F8 13            [12]  291 	ldhl	sp,	#19
      0000E7 34               [12]  292 	inc	(hl)
      0000E8 18 98            [12]  293 	jr	00104$
      0000EA                        294 00101$:
                           0000EA   295 	C$common.c$45$2_1$139	= .
                                    296 	.globl	C$common.c$45$2_1$139
                                    297 ;src\common.c:45: for (uint8_t i=0; i<len; i++)
      0000EA F8 11            [12]  298 	ldhl	sp,	#17
      0000EC 2A               [ 8]  299 	ld	a, (hl+)
      0000ED 4F               [ 4]  300 	ld	c, a
      0000EE 46               [ 8]  301 	ld	b, (hl)
      0000EF 1E 00            [ 8]  302 	ld	e, #0x00
      0000F1                        303 00107$:
      0000F1 7B               [ 4]  304 	ld	a, e
      0000F2 F8 08            [12]  305 	ldhl	sp,	#8
      0000F4 96               [ 8]  306 	sub	a, (hl)
      0000F5 30 1C            [12]  307 	jr	NC, 00109$
                           0000F7   308 	C$common.c$47$3_1$144	= .
                                    309 	.globl	C$common.c$47$3_1$144
                                    310 ;src\common.c:47: set_vram_byte(vramAddr++, (buffer[i] -'0')+283);
      0000F7 D5               [16]  311 	push	de
      0000F8 16 00            [ 8]  312 	ld	d, #0x00
      0000FA 21 02 00         [12]  313 	ld	hl, #2
      0000FD 39               [ 8]  314 	add	hl, sp
      0000FE 19               [ 8]  315 	add	hl, de
      0000FF D1               [12]  316 	pop	de
      000100 7E               [ 8]  317 	ld	a, (hl)
      000101 C6 EB            [ 8]  318 	add	a, #0xeb
      000103 69               [ 4]  319 	ld	l, c
                                    320 ;	spillPairReg hl
                                    321 ;	spillPairReg hl
      000104 60               [ 4]  322 	ld	h, b
                                    323 ;	spillPairReg hl
                                    324 ;	spillPairReg hl
      000105 03               [ 8]  325 	inc	bc
      000106 D5               [16]  326 	push	de
      000107 F5               [16]  327 	push	af
      000108 33               [ 8]  328 	inc	sp
      000109 E5               [16]  329 	push	hl
      00010A CDr00r00         [24]  330 	call	_set_vram_byte
      00010D E8 03            [16]  331 	add	sp, #3
      00010F D1               [12]  332 	pop	de
                           000110   333 	C$common.c$45$2_1$143	= .
                                    334 	.globl	C$common.c$45$2_1$143
                                    335 ;src\common.c:45: for (uint8_t i=0; i<len; i++)
      000110 1C               [ 4]  336 	inc	e
      000111 18 DE            [12]  337 	jr	00107$
      000113                        338 00109$:
                           000113   339 	C$common.c$49$2_1$139	= .
                                    340 	.globl	C$common.c$49$2_1$139
                                    341 ;src\common.c:49: }
      000113 E8 14            [16]  342 	add	sp, #20
      000115 E1               [12]  343 	pop	hl
      000116 E8 03            [16]  344 	add	sp, #3
      000118 E9               [ 4]  345 	jp	(hl)
                           000119   346 	G$DrawNumberWindow$0$0	= .
                                    347 	.globl	G$DrawNumberWindow$0$0
                           000119   348 	C$common.c$51$2_1$146	= .
                                    349 	.globl	C$common.c$51$2_1$146
                                    350 ;src\common.c:51: void DrawNumberWindow(uint8_t x, uint8_t y, uint16_t number, uint8_t digits)
                                    351 ;	---------------------------------
                                    352 ; Function DrawNumberWindow
                                    353 ; ---------------------------------
      000119                        354 _DrawNumberWindow::
      000119 E8 EC            [16]  355 	add	sp, #-20
      00011B F8 10            [12]  356 	ldhl	sp,	#16
      00011D 32               [ 8]  357 	ld	(hl-), a
      00011E 73               [ 8]  358 	ld	(hl), e
                           00011F   359 	C$common.c$53$2_0$146	= .
                                    360 	.globl	C$common.c$53$2_0$146
                                    361 ;src\common.c:53: unsigned char buffer[8]={'0', '0', '0', '0', '0', '0', '0', '0'};
      00011F F8 00            [12]  362 	ldhl	sp,	#0
      000121 3E 30            [ 8]  363 	ld	a,#0x30
      000123 22               [ 8]  364 	ld	(hl+),a
      000124 22               [ 8]  365 	ld	(hl+), a
      000125 3E 30            [ 8]  366 	ld	a,#0x30
      000127 22               [ 8]  367 	ld	(hl+),a
      000128 22               [ 8]  368 	ld	(hl+), a
      000129 3E 30            [ 8]  369 	ld	a,#0x30
      00012B 22               [ 8]  370 	ld	(hl+),a
      00012C 22               [ 8]  371 	ld	(hl+), a
      00012D 3E 30            [ 8]  372 	ld	a, #0x30
      00012F 22               [ 8]  373 	ld	(hl+), a
      000130 36 30            [12]  374 	ld	(hl), #0x30
                           000132   375 	C$common.c$56$1_0$146	= .
                                    376 	.globl	C$common.c$56$1_0$146
                                    377 ;src\common.c:56: uitoa(number, buffer, 10);
      000132 F8 16            [12]  378 	ldhl	sp,	#22
      000134 7E               [ 8]  379 	ld	a, (hl)
      000135 F8 12            [12]  380 	ldhl	sp,	#18
      000137 77               [ 8]  381 	ld	(hl), a
      000138 F8 17            [12]  382 	ldhl	sp,	#23
      00013A 7E               [ 8]  383 	ld	a, (hl)
      00013B F8 13            [12]  384 	ldhl	sp,	#19
      00013D 77               [ 8]  385 	ld	(hl), a
      00013E 3E 0A            [ 8]  386 	ld	a, #0x0a
      000140 F5               [16]  387 	push	af
      000141 33               [ 8]  388 	inc	sp
      000142 21 01 00         [12]  389 	ld	hl, #1
      000145 39               [ 8]  390 	add	hl, sp
      000146 E5               [16]  391 	push	hl
      000147 F8 15            [12]  392 	ldhl	sp,	#21
      000149 2A               [ 8]  393 	ld	a, (hl+)
      00014A 5F               [ 4]  394 	ld	e, a
      00014B 56               [ 8]  395 	ld	d, (hl)
      00014C D5               [16]  396 	push	de
      00014D CDr00r00         [24]  397 	call	_uitoa
      000150 E8 05            [16]  398 	add	sp, #5
                           000152   399 	C$common.c$59$1_1$147	= .
                                    400 	.globl	C$common.c$59$1_1$147
                                    401 ;src\common.c:59: uint8_t *vramAddr = get_win_xy_addr(x,y);
      000152 F8 0F            [12]  402 	ldhl	sp,	#15
      000154 2A               [ 8]  403 	ld	a, (hl+)
      000155 57               [ 4]  404 	ld	d, a
      000156 5E               [ 8]  405 	ld	e, (hl)
      000157 D5               [16]  406 	push	de
      000158 CDr00r00         [24]  407 	call	_get_win_xy_addr
      00015B E1               [12]  408 	pop	hl
      00015C F8 12            [12]  409 	ldhl	sp,	#18
      00015E 7B               [ 4]  410 	ld	a, e
      00015F 22               [ 8]  411 	ld	(hl+), a
      000160 72               [ 8]  412 	ld	(hl), d
      000161 F8 12            [12]  413 	ldhl	sp,	#18
      000163 7E               [ 8]  414 	ld	a, (hl)
      000164 F8 0D            [12]  415 	ldhl	sp,	#13
      000166 77               [ 8]  416 	ld	(hl), a
      000167 F8 13            [12]  417 	ldhl	sp,	#19
      000169 7E               [ 8]  418 	ld	a, (hl)
      00016A F8 0E            [12]  419 	ldhl	sp,	#14
      00016C 77               [ 8]  420 	ld	(hl), a
                           00016D   421 	C$common.c$61$1_1$147	= .
                                    422 	.globl	C$common.c$61$1_1$147
                                    423 ;src\common.c:61: uint8_t len = strlen(buffer);
      00016D 21 00 00         [12]  424 	ld	hl, #0
      000170 39               [ 8]  425 	add	hl, sp
      000171 E5               [16]  426 	push	hl
      000172 CDr00r00         [24]  427 	call	_strlen
      000175 E1               [12]  428 	pop	hl
      000176 F8 12            [12]  429 	ldhl	sp,	#18
      000178 7B               [ 4]  430 	ld	a, e
      000179 22               [ 8]  431 	ld	(hl+), a
      00017A 72               [ 8]  432 	ld	(hl), d
      00017B F8 12            [12]  433 	ldhl	sp,	#18
      00017D 7E               [ 8]  434 	ld	a, (hl)
      00017E F8 08            [12]  435 	ldhl	sp,	#8
      000180 77               [ 8]  436 	ld	(hl), a
                           000181   437 	C$common.c$66$2_1$146	= .
                                    438 	.globl	C$common.c$66$2_1$146
                                    439 ;src\common.c:66: for (uint8_t i=0; i<digits-len;i++)
      000181 F8 0D            [12]  440 	ldhl	sp,	#13
      000183 7E               [ 8]  441 	ld	a, (hl)
      000184 F8 11            [12]  442 	ldhl	sp,	#17
      000186 77               [ 8]  443 	ld	(hl), a
      000187 F8 0E            [12]  444 	ldhl	sp,	#14
      000189 7E               [ 8]  445 	ld	a, (hl)
      00018A F8 12            [12]  446 	ldhl	sp,	#18
      00018C 22               [ 8]  447 	ld	(hl+), a
      00018D 36 00            [12]  448 	ld	(hl), #0x00
      00018F                        449 00104$:
      00018F F8 18            [12]  450 	ldhl	sp,	#24
      000191 7E               [ 8]  451 	ld	a, (hl)
      000192 F8 09            [12]  452 	ldhl	sp,	#9
      000194 22               [ 8]  453 	ld	(hl+), a
      000195 AF               [ 4]  454 	xor	a, a
      000196 32               [ 8]  455 	ld	(hl-), a
      000197 2B               [ 8]  456 	dec	hl
      000198 7E               [ 8]  457 	ld	a, (hl)
      000199 F8 0B            [12]  458 	ldhl	sp,	#11
      00019B 22               [ 8]  459 	ld	(hl+), a
      00019C AF               [ 4]  460 	xor	a, a
      00019D 32               [ 8]  461 	ld	(hl-), a
      00019E 2B               [ 8]  462 	dec	hl
      00019F 2B               [ 8]  463 	dec	hl
      0001A0 2A               [ 8]  464 	ld	a, (hl+)
      0001A1 5F               [ 4]  465 	ld	e, a
      0001A2 2A               [ 8]  466 	ld	a, (hl+)
      0001A3 57               [ 4]  467 	ld	d, a
      0001A4 2A               [ 8]  468 	ld	a,	(hl+)
      0001A5 66               [ 8]  469 	ld	h, (hl)
      0001A6 6F               [ 4]  470 	ld	l, a
      0001A7 7B               [ 4]  471 	ld	a, e
      0001A8 95               [ 4]  472 	sub	a, l
      0001A9 5F               [ 4]  473 	ld	e, a
      0001AA 7A               [ 4]  474 	ld	a, d
      0001AB 9C               [ 4]  475 	sbc	a, h
      0001AC F8 0E            [12]  476 	ldhl	sp,	#14
      0001AE 32               [ 8]  477 	ld	(hl-), a
      0001AF 73               [ 8]  478 	ld	(hl), e
      0001B0 F8 13            [12]  479 	ldhl	sp,	#19
      0001B2 4E               [ 8]  480 	ld	c, (hl)
      0001B3 06 00            [ 8]  481 	ld	b, #0x00
      0001B5 F8 0D            [12]  482 	ldhl	sp,	#13
      0001B7 79               [ 4]  483 	ld	a, c
      0001B8 96               [ 8]  484 	sub	a, (hl)
      0001B9 23               [ 8]  485 	inc	hl
      0001BA 78               [ 4]  486 	ld	a, b
      0001BB 9E               [ 8]  487 	sbc	a, (hl)
      0001BC 78               [ 4]  488 	ld	a, b
      0001BD 57               [ 4]  489 	ld	d, a
      0001BE CB 7E            [12]  490 	bit	7, (hl)
      0001C0 28 07            [12]  491 	jr	Z, 00133$
      0001C2 CB 7A            [ 8]  492 	bit	7, d
      0001C4 20 08            [12]  493 	jr	NZ, 00134$
      0001C6 BF               [ 4]  494 	cp	a, a
      0001C7 18 05            [12]  495 	jr	00134$
      0001C9                        496 00133$:
      0001C9 CB 7A            [ 8]  497 	bit	7, d
      0001CB 28 01            [12]  498 	jr	Z, 00134$
      0001CD 37               [ 4]  499 	scf
      0001CE                        500 00134$:
      0001CE 30 27            [12]  501 	jr	NC, 00101$
                           0001D0   502 	C$common.c$68$3_1$149	= .
                                    503 	.globl	C$common.c$68$3_1$149
                                    504 ;src\common.c:68: set_vram_byte(vramAddr++, 283);
      0001D0 F8 11            [12]  505 	ldhl	sp,	#17
      0001D2 7E               [ 8]  506 	ld	a, (hl)
      0001D3 F8 0D            [12]  507 	ldhl	sp,	#13
      0001D5 77               [ 8]  508 	ld	(hl), a
      0001D6 F8 12            [12]  509 	ldhl	sp,	#18
      0001D8 7E               [ 8]  510 	ld	a, (hl)
      0001D9 F8 0E            [12]  511 	ldhl	sp,	#14
      0001DB 77               [ 8]  512 	ld	(hl), a
      0001DC F8 11            [12]  513 	ldhl	sp,	#17
      0001DE 34               [12]  514 	inc	(hl)
      0001DF 20 02            [12]  515 	jr	NZ, 00135$
      0001E1 23               [ 8]  516 	inc	hl
      0001E2 34               [12]  517 	inc	(hl)
      0001E3                        518 00135$:
      0001E3 3E 1B            [ 8]  519 	ld	a, #0x1b
      0001E5 F5               [16]  520 	push	af
      0001E6 33               [ 8]  521 	inc	sp
      0001E7 F8 0E            [12]  522 	ldhl	sp,	#14
      0001E9 2A               [ 8]  523 	ld	a, (hl+)
      0001EA 5F               [ 4]  524 	ld	e, a
      0001EB 56               [ 8]  525 	ld	d, (hl)
      0001EC D5               [16]  526 	push	de
      0001ED CDr00r00         [24]  527 	call	_set_vram_byte
      0001F0 E8 03            [16]  528 	add	sp, #3
                           0001F2   529 	C$common.c$66$2_1$148	= .
                                    530 	.globl	C$common.c$66$2_1$148
                                    531 ;src\common.c:66: for (uint8_t i=0; i<digits-len;i++)
      0001F2 F8 13            [12]  532 	ldhl	sp,	#19
      0001F4 34               [12]  533 	inc	(hl)
      0001F5 18 98            [12]  534 	jr	00104$
      0001F7                        535 00101$:
                           0001F7   536 	C$common.c$73$2_1$146	= .
                                    537 	.globl	C$common.c$73$2_1$146
                                    538 ;src\common.c:73: for (uint8_t i=0; i<len; i++)
      0001F7 F8 11            [12]  539 	ldhl	sp,	#17
      0001F9 2A               [ 8]  540 	ld	a, (hl+)
      0001FA 4F               [ 4]  541 	ld	c, a
      0001FB 46               [ 8]  542 	ld	b, (hl)
      0001FC 1E 00            [ 8]  543 	ld	e, #0x00
      0001FE                        544 00107$:
      0001FE 7B               [ 4]  545 	ld	a, e
      0001FF F8 08            [12]  546 	ldhl	sp,	#8
      000201 96               [ 8]  547 	sub	a, (hl)
      000202 30 1C            [12]  548 	jr	NC, 00109$
                           000204   549 	C$common.c$75$3_1$151	= .
                                    550 	.globl	C$common.c$75$3_1$151
                                    551 ;src\common.c:75: set_vram_byte(vramAddr++, (buffer[i] -'0')+283);
      000204 D5               [16]  552 	push	de
      000205 16 00            [ 8]  553 	ld	d, #0x00
      000207 21 02 00         [12]  554 	ld	hl, #2
      00020A 39               [ 8]  555 	add	hl, sp
      00020B 19               [ 8]  556 	add	hl, de
      00020C D1               [12]  557 	pop	de
      00020D 7E               [ 8]  558 	ld	a, (hl)
      00020E C6 EB            [ 8]  559 	add	a, #0xeb
      000210 69               [ 4]  560 	ld	l, c
                                    561 ;	spillPairReg hl
                                    562 ;	spillPairReg hl
      000211 60               [ 4]  563 	ld	h, b
                                    564 ;	spillPairReg hl
                                    565 ;	spillPairReg hl
      000212 03               [ 8]  566 	inc	bc
      000213 D5               [16]  567 	push	de
      000214 F5               [16]  568 	push	af
      000215 33               [ 8]  569 	inc	sp
      000216 E5               [16]  570 	push	hl
      000217 CDr00r00         [24]  571 	call	_set_vram_byte
      00021A E8 03            [16]  572 	add	sp, #3
      00021C D1               [12]  573 	pop	de
                           00021D   574 	C$common.c$73$2_1$150	= .
                                    575 	.globl	C$common.c$73$2_1$150
                                    576 ;src\common.c:73: for (uint8_t i=0; i<len; i++)
      00021D 1C               [ 4]  577 	inc	e
      00021E 18 DE            [12]  578 	jr	00107$
      000220                        579 00109$:
                           000220   580 	C$common.c$77$2_1$146	= .
                                    581 	.globl	C$common.c$77$2_1$146
                                    582 ;src\common.c:77: }
      000220 E8 14            [16]  583 	add	sp, #20
      000222 E1               [12]  584 	pop	hl
      000223 E8 03            [16]  585 	add	sp, #3
      000225 E9               [ 4]  586 	jp	(hl)
                           000226   587 	G$DrawText$0$0	= .
                                    588 	.globl	G$DrawText$0$0
                           000226   589 	C$common.c$79$2_1$153	= .
                                    590 	.globl	C$common.c$79$2_1$153
                                    591 ;src\common.c:79: void DrawText(uint8_t x, uint8_t y, unsigned char *text ){
                                    592 ;	---------------------------------
                                    593 ; Function DrawText
                                    594 ; ---------------------------------
      000226                        595 _DrawText::
      000226 E8 FD            [16]  596 	add	sp, #-3
      000228 47               [ 4]  597 	ld	b, a
                           000229   598 	C$common.c$85$1_0$153	= .
                                    599 	.globl	C$common.c$85$1_0$153
                                    600 ;src\common.c:85: uint8_t *vramAddr= get_bkg_xy_addr(x,y);
      000229 7B               [ 4]  601 	ld	a, e
      00022A F5               [16]  602 	push	af
      00022B 33               [ 8]  603 	inc	sp
      00022C C5               [16]  604 	push	bc
      00022D 33               [ 8]  605 	inc	sp
      00022E CDr00r00         [24]  606 	call	_get_bkg_xy_addr
      000231 E1               [12]  607 	pop	hl
                           000232   608 	C$common.c$87$1_0$153	= .
                                    609 	.globl	C$common.c$87$1_0$153
                                    610 ;src\common.c:87: while(text[i]!='\0'){
      000232 F8 02            [12]  611 	ldhl	sp,	#2
      000234 36 00            [12]  612 	ld	(hl), #0x00
      000236                        613 00118$:
      000236 D5               [16]  614 	push	de
      000237 F8 07            [12]  615 	ldhl	sp,#7
      000239 2A               [ 8]  616 	ld	a, (hl+)
      00023A 5F               [ 4]  617 	ld	e, a
      00023B 56               [ 8]  618 	ld	d, (hl)
      00023C F8 04            [12]  619 	ldhl	sp,	#4
      00023E 6E               [ 8]  620 	ld	l, (hl)
      00023F 26 00            [ 8]  621 	ld	h, #0x00
      000241 19               [ 8]  622 	add	hl, de
      000242 D1               [12]  623 	pop	de
      000243 4D               [ 4]  624 	ld	c, l
      000244 44               [ 4]  625 	ld	b, h
                           000245   626 	C$common.c$92$1_0$153	= .
                                    627 	.globl	C$common.c$92$1_0$153
                                    628 ;src\common.c:92: else if(text[i]>='a'&&text[i]<='z')set_vram_byte(vramAddr++,1+(text[i]-'a'));
      000245 0A               [ 8]  629 	ld	a, (bc)
                           000246   630 	C$common.c$87$1_0$153	= .
                                    631 	.globl	C$common.c$87$1_0$153
                                    632 ;src\common.c:87: while(text[i]!='\0'){
      000246 4F               [ 4]  633 	ld	c, a
      000247 B7               [ 4]  634 	or	a, a
      000248 CArF7r02         [16]  635 	jp	Z, 00120$
                           00024B   636 	C$common.c$91$1_0$153	= .
                                    637 	.globl	C$common.c$91$1_0$153
                                    638 ;src\common.c:91: if(text[i]>='A'&&text[i]<='Z')set_vram_byte(vramAddr++,1+(text[i]-'A'));
      00024B D5               [16]  639 	push	de
      00024C 6B               [ 4]  640 	ld	l, e
      00024D 62               [ 4]  641 	ld	h, d
      00024E 23               [ 8]  642 	inc	hl
      00024F D1               [12]  643 	pop	de
      000250 33               [ 8]  644 	inc	sp
      000251 33               [ 8]  645 	inc	sp
      000252 E5               [16]  646 	push	hl
      000253 41               [ 4]  647 	ld	b, c
      000254 79               [ 4]  648 	ld	a, c
      000255 D6 41            [ 8]  649 	sub	a, #0x41
      000257 38 19            [12]  650 	jr	C, 00115$
      000259 3E 5A            [ 8]  651 	ld	a, #0x5a
      00025B 91               [ 4]  652 	sub	a, c
      00025C 38 14            [12]  653 	jr	C, 00115$
      00025E 78               [ 4]  654 	ld	a, b
      00025F C6 C0            [ 8]  655 	add	a, #0xc0
      000261 4B               [ 4]  656 	ld	c, e
      000262 42               [ 4]  657 	ld	b, d
      000263 D1               [12]  658 	pop	de
      000264 D5               [16]  659 	push	de
      000265 D5               [16]  660 	push	de
      000266 F5               [16]  661 	push	af
      000267 33               [ 8]  662 	inc	sp
      000268 C5               [16]  663 	push	bc
      000269 CDr00r00         [24]  664 	call	_set_vram_byte
      00026C E8 03            [16]  665 	add	sp, #3
      00026E D1               [12]  666 	pop	de
      00026F C3rF1r02         [16]  667 	jp	00116$
      000272                        668 00115$:
                           000272   669 	C$common.c$92$2_0$154	= .
                                    670 	.globl	C$common.c$92$2_0$154
                                    671 ;src\common.c:92: else if(text[i]>='a'&&text[i]<='z')set_vram_byte(vramAddr++,1+(text[i]-'a'));
      000272 79               [ 4]  672 	ld	a, c
      000273 D6 61            [ 8]  673 	sub	a, #0x61
      000275 38 18            [12]  674 	jr	C, 00111$
      000277 3E 7A            [ 8]  675 	ld	a, #0x7a
      000279 91               [ 4]  676 	sub	a, c
      00027A 38 13            [12]  677 	jr	C, 00111$
      00027C 78               [ 4]  678 	ld	a, b
      00027D C6 A0            [ 8]  679 	add	a, #0xa0
      00027F 4B               [ 4]  680 	ld	c, e
      000280 42               [ 4]  681 	ld	b, d
      000281 D1               [12]  682 	pop	de
      000282 D5               [16]  683 	push	de
      000283 D5               [16]  684 	push	de
      000284 F5               [16]  685 	push	af
      000285 33               [ 8]  686 	inc	sp
      000286 C5               [16]  687 	push	bc
      000287 CDr00r00         [24]  688 	call	_set_vram_byte
      00028A E8 03            [16]  689 	add	sp, #3
      00028C D1               [12]  690 	pop	de
      00028D 18 62            [12]  691 	jr	00116$
      00028F                        692 00111$:
                           00028F   693 	C$common.c$93$2_0$154	= .
                                    694 	.globl	C$common.c$93$2_0$154
                                    695 ;src\common.c:93: else if(text[i]>='0'&&text[i]<='9')set_vram_byte(vramAddr++,27+(text[i]-'0'));
      00028F 79               [ 4]  696 	ld	a, c
      000290 D6 30            [ 8]  697 	sub	a, #0x30
      000292 38 18            [12]  698 	jr	C, 00107$
      000294 3E 39            [ 8]  699 	ld	a, #0x39
      000296 91               [ 4]  700 	sub	a, c
      000297 38 13            [12]  701 	jr	C, 00107$
      000299 78               [ 4]  702 	ld	a, b
      00029A C6 EB            [ 8]  703 	add	a, #0xeb
      00029C 4B               [ 4]  704 	ld	c, e
      00029D 42               [ 4]  705 	ld	b, d
      00029E D1               [12]  706 	pop	de
      00029F D5               [16]  707 	push	de
      0002A0 D5               [16]  708 	push	de
      0002A1 F5               [16]  709 	push	af
      0002A2 33               [ 8]  710 	inc	sp
      0002A3 C5               [16]  711 	push	bc
      0002A4 CDr00r00         [24]  712 	call	_set_vram_byte
      0002A7 E8 03            [16]  713 	add	sp, #3
      0002A9 D1               [12]  714 	pop	de
      0002AA 18 45            [12]  715 	jr	00116$
      0002AC                        716 00107$:
                           0002AC   717 	C$common.c$99$3_0$155	= .
                                    718 	.globl	C$common.c$99$3_0$155
                                    719 ;src\common.c:99: switch(text[i]){
      0002AC 79               [ 4]  720 	ld	a,c
      0002AD FE 2E            [ 8]  721 	cp	a,#0x2e
      0002AF 28 1A            [12]  722 	jr	Z, 00102$
      0002B1 FE 2F            [ 8]  723 	cp	a,#0x2f
      0002B3 28 28            [12]  724 	jr	Z, 00103$
      0002B5 D6 3A            [ 8]  725 	sub	a, #0x3a
      0002B7 20 36            [12]  726 	jr	NZ, 00104$
                           0002B9   727 	C$common.c$100$4_0$156	= .
                                    728 	.globl	C$common.c$100$4_0$156
                                    729 ;src\common.c:100: case ':': set_vram_byte(vramAddr++,38); break;
      0002B9 4B               [ 4]  730 	ld	c, e
      0002BA 42               [ 4]  731 	ld	b, d
      0002BB D1               [12]  732 	pop	de
      0002BC D5               [16]  733 	push	de
      0002BD D5               [16]  734 	push	de
      0002BE 3E 26            [ 8]  735 	ld	a, #0x26
      0002C0 F5               [16]  736 	push	af
      0002C1 33               [ 8]  737 	inc	sp
      0002C2 C5               [16]  738 	push	bc
      0002C3 CDr00r00         [24]  739 	call	_set_vram_byte
      0002C6 E8 03            [16]  740 	add	sp, #3
      0002C8 D1               [12]  741 	pop	de
      0002C9 18 26            [12]  742 	jr	00116$
                           0002CB   743 	C$common.c$101$4_0$156	= .
                                    744 	.globl	C$common.c$101$4_0$156
                                    745 ;src\common.c:101: case '.': set_vram_byte(vramAddr++,43);break;
      0002CB                        746 00102$:
      0002CB 4B               [ 4]  747 	ld	c, e
      0002CC 42               [ 4]  748 	ld	b, d
      0002CD D1               [12]  749 	pop	de
      0002CE D5               [16]  750 	push	de
      0002CF D5               [16]  751 	push	de
      0002D0 3E 2B            [ 8]  752 	ld	a, #0x2b
      0002D2 F5               [16]  753 	push	af
      0002D3 33               [ 8]  754 	inc	sp
      0002D4 C5               [16]  755 	push	bc
      0002D5 CDr00r00         [24]  756 	call	_set_vram_byte
      0002D8 E8 03            [16]  757 	add	sp, #3
      0002DA D1               [12]  758 	pop	de
      0002DB 18 14            [12]  759 	jr	00116$
                           0002DD   760 	C$common.c$102$4_0$156	= .
                                    761 	.globl	C$common.c$102$4_0$156
                                    762 ;src\common.c:102: case '/': set_vram_byte(vramAddr++,40);break;
      0002DD                        763 00103$:
      0002DD 4B               [ 4]  764 	ld	c, e
      0002DE 42               [ 4]  765 	ld	b, d
      0002DF D1               [12]  766 	pop	de
      0002E0 D5               [16]  767 	push	de
      0002E1 D5               [16]  768 	push	de
      0002E2 3E 28            [ 8]  769 	ld	a, #0x28
      0002E4 F5               [16]  770 	push	af
      0002E5 33               [ 8]  771 	inc	sp
      0002E6 C5               [16]  772 	push	bc
      0002E7 CDr00r00         [24]  773 	call	_set_vram_byte
      0002EA E8 03            [16]  774 	add	sp, #3
      0002EC D1               [12]  775 	pop	de
      0002ED 18 02            [12]  776 	jr	00116$
                           0002EF   777 	C$common.c$103$4_0$156	= .
                                    778 	.globl	C$common.c$103$4_0$156
                                    779 ;src\common.c:103: default: vramAddr++; break;
      0002EF                        780 00104$:
      0002EF D1               [12]  781 	pop	de
      0002F0 D5               [16]  782 	push	de
                           0002F1   783 	C$common.c$104$2_0$154	= .
                                    784 	.globl	C$common.c$104$2_0$154
                                    785 ;src\common.c:104: }
      0002F1                        786 00116$:
                           0002F1   787 	C$common.c$108$2_0$154	= .
                                    788 	.globl	C$common.c$108$2_0$154
                                    789 ;src\common.c:108: i++;
      0002F1 F8 02            [12]  790 	ldhl	sp,	#2
      0002F3 34               [12]  791 	inc	(hl)
      0002F4 C3r36r02         [16]  792 	jp	00118$
      0002F7                        793 00120$:
                           0002F7   794 	C$common.c$110$1_0$153	= .
                                    795 	.globl	C$common.c$110$1_0$153
                                    796 ;src\common.c:110: VBK_REG=0;
      0002F7 AF               [ 4]  797 	xor	a, a
      0002F8 E0r00            [12]  798 	ldh	(_VBK_REG + 0), a
                           0002FA   799 	C$common.c$112$1_0$153	= .
                                    800 	.globl	C$common.c$112$1_0$153
                                    801 ;src\common.c:112: }
      0002FA E8 03            [16]  802 	add	sp, #3
      0002FC E1               [12]  803 	pop	hl
      0002FD F1               [12]  804 	pop	af
      0002FE E9               [ 4]  805 	jp	(hl)
                           0002FF   806 	G$DrawTextWindow$0$0	= .
                                    807 	.globl	G$DrawTextWindow$0$0
                           0002FF   808 	C$common.c$114$1_0$158	= .
                                    809 	.globl	C$common.c$114$1_0$158
                                    810 ;src\common.c:114: void DrawTextWindow(uint8_t x, uint8_t y, unsigned char *text ){
                                    811 ;	---------------------------------
                                    812 ; Function DrawTextWindow
                                    813 ; ---------------------------------
      0002FF                        814 _DrawTextWindow::
      0002FF E8 FD            [16]  815 	add	sp, #-3
      000301 47               [ 4]  816 	ld	b, a
                           000302   817 	C$common.c$120$1_0$158	= .
                                    818 	.globl	C$common.c$120$1_0$158
                                    819 ;src\common.c:120: uint8_t *vramAddr= get_win_xy_addr(x,y);
      000302 7B               [ 4]  820 	ld	a, e
      000303 F5               [16]  821 	push	af
      000304 33               [ 8]  822 	inc	sp
      000305 C5               [16]  823 	push	bc
      000306 33               [ 8]  824 	inc	sp
      000307 CDr00r00         [24]  825 	call	_get_win_xy_addr
      00030A E1               [12]  826 	pop	hl
                           00030B   827 	C$common.c$122$1_0$158	= .
                                    828 	.globl	C$common.c$122$1_0$158
                                    829 ;src\common.c:122: while(text[i]!='\0'){
      00030B F8 02            [12]  830 	ldhl	sp,	#2
      00030D 36 00            [12]  831 	ld	(hl), #0x00
      00030F                        832 00118$:
      00030F D5               [16]  833 	push	de
      000310 F8 07            [12]  834 	ldhl	sp,#7
      000312 2A               [ 8]  835 	ld	a, (hl+)
      000313 5F               [ 4]  836 	ld	e, a
      000314 56               [ 8]  837 	ld	d, (hl)
      000315 F8 04            [12]  838 	ldhl	sp,	#4
      000317 6E               [ 8]  839 	ld	l, (hl)
      000318 26 00            [ 8]  840 	ld	h, #0x00
      00031A 19               [ 8]  841 	add	hl, de
      00031B D1               [12]  842 	pop	de
      00031C 4D               [ 4]  843 	ld	c, l
      00031D 44               [ 4]  844 	ld	b, h
                           00031E   845 	C$common.c$127$1_0$158	= .
                                    846 	.globl	C$common.c$127$1_0$158
                                    847 ;src\common.c:127: else if(text[i]>='a'&&text[i]<='z')set_vram_byte(vramAddr++,1+(text[i]-'a'));
      00031E 0A               [ 8]  848 	ld	a, (bc)
                           00031F   849 	C$common.c$122$1_0$158	= .
                                    850 	.globl	C$common.c$122$1_0$158
                                    851 ;src\common.c:122: while(text[i]!='\0'){
      00031F 4F               [ 4]  852 	ld	c, a
      000320 B7               [ 4]  853 	or	a, a
      000321 CArD0r03         [16]  854 	jp	Z, 00120$
                           000324   855 	C$common.c$126$1_0$158	= .
                                    856 	.globl	C$common.c$126$1_0$158
                                    857 ;src\common.c:126: if(text[i]>='A'&&text[i]<='Z')set_vram_byte(vramAddr++,1+(text[i]-'A'));
      000324 D5               [16]  858 	push	de
      000325 6B               [ 4]  859 	ld	l, e
      000326 62               [ 4]  860 	ld	h, d
      000327 23               [ 8]  861 	inc	hl
      000328 D1               [12]  862 	pop	de
      000329 33               [ 8]  863 	inc	sp
      00032A 33               [ 8]  864 	inc	sp
      00032B E5               [16]  865 	push	hl
      00032C 41               [ 4]  866 	ld	b, c
      00032D 79               [ 4]  867 	ld	a, c
      00032E D6 41            [ 8]  868 	sub	a, #0x41
      000330 38 19            [12]  869 	jr	C, 00115$
      000332 3E 5A            [ 8]  870 	ld	a, #0x5a
      000334 91               [ 4]  871 	sub	a, c
      000335 38 14            [12]  872 	jr	C, 00115$
      000337 78               [ 4]  873 	ld	a, b
      000338 C6 C0            [ 8]  874 	add	a, #0xc0
      00033A 4B               [ 4]  875 	ld	c, e
      00033B 42               [ 4]  876 	ld	b, d
      00033C D1               [12]  877 	pop	de
      00033D D5               [16]  878 	push	de
      00033E D5               [16]  879 	push	de
      00033F F5               [16]  880 	push	af
      000340 33               [ 8]  881 	inc	sp
      000341 C5               [16]  882 	push	bc
      000342 CDr00r00         [24]  883 	call	_set_vram_byte
      000345 E8 03            [16]  884 	add	sp, #3
      000347 D1               [12]  885 	pop	de
      000348 C3rCAr03         [16]  886 	jp	00116$
      00034B                        887 00115$:
                           00034B   888 	C$common.c$127$2_0$159	= .
                                    889 	.globl	C$common.c$127$2_0$159
                                    890 ;src\common.c:127: else if(text[i]>='a'&&text[i]<='z')set_vram_byte(vramAddr++,1+(text[i]-'a'));
      00034B 79               [ 4]  891 	ld	a, c
      00034C D6 61            [ 8]  892 	sub	a, #0x61
      00034E 38 18            [12]  893 	jr	C, 00111$
      000350 3E 7A            [ 8]  894 	ld	a, #0x7a
      000352 91               [ 4]  895 	sub	a, c
      000353 38 13            [12]  896 	jr	C, 00111$
      000355 78               [ 4]  897 	ld	a, b
      000356 C6 A0            [ 8]  898 	add	a, #0xa0
      000358 4B               [ 4]  899 	ld	c, e
      000359 42               [ 4]  900 	ld	b, d
      00035A D1               [12]  901 	pop	de
      00035B D5               [16]  902 	push	de
      00035C D5               [16]  903 	push	de
      00035D F5               [16]  904 	push	af
      00035E 33               [ 8]  905 	inc	sp
      00035F C5               [16]  906 	push	bc
      000360 CDr00r00         [24]  907 	call	_set_vram_byte
      000363 E8 03            [16]  908 	add	sp, #3
      000365 D1               [12]  909 	pop	de
      000366 18 62            [12]  910 	jr	00116$
      000368                        911 00111$:
                           000368   912 	C$common.c$128$2_0$159	= .
                                    913 	.globl	C$common.c$128$2_0$159
                                    914 ;src\common.c:128: else if(text[i]>='0'&&text[i]<='9')set_vram_byte(vramAddr++,27+(text[i]-'0'));
      000368 79               [ 4]  915 	ld	a, c
      000369 D6 30            [ 8]  916 	sub	a, #0x30
      00036B 38 18            [12]  917 	jr	C, 00107$
      00036D 3E 39            [ 8]  918 	ld	a, #0x39
      00036F 91               [ 4]  919 	sub	a, c
      000370 38 13            [12]  920 	jr	C, 00107$
      000372 78               [ 4]  921 	ld	a, b
      000373 C6 EB            [ 8]  922 	add	a, #0xeb
      000375 4B               [ 4]  923 	ld	c, e
      000376 42               [ 4]  924 	ld	b, d
      000377 D1               [12]  925 	pop	de
      000378 D5               [16]  926 	push	de
      000379 D5               [16]  927 	push	de
      00037A F5               [16]  928 	push	af
      00037B 33               [ 8]  929 	inc	sp
      00037C C5               [16]  930 	push	bc
      00037D CDr00r00         [24]  931 	call	_set_vram_byte
      000380 E8 03            [16]  932 	add	sp, #3
      000382 D1               [12]  933 	pop	de
      000383 18 45            [12]  934 	jr	00116$
      000385                        935 00107$:
                           000385   936 	C$common.c$134$3_0$160	= .
                                    937 	.globl	C$common.c$134$3_0$160
                                    938 ;src\common.c:134: switch(text[i]){
      000385 79               [ 4]  939 	ld	a,c
      000386 FE 2E            [ 8]  940 	cp	a,#0x2e
      000388 28 1A            [12]  941 	jr	Z, 00102$
      00038A FE 2F            [ 8]  942 	cp	a,#0x2f
      00038C 28 28            [12]  943 	jr	Z, 00103$
      00038E D6 3A            [ 8]  944 	sub	a, #0x3a
      000390 20 36            [12]  945 	jr	NZ, 00104$
                           000392   946 	C$common.c$135$4_0$161	= .
                                    947 	.globl	C$common.c$135$4_0$161
                                    948 ;src\common.c:135: case ':': set_vram_byte(vramAddr++,38); break;
      000392 4B               [ 4]  949 	ld	c, e
      000393 42               [ 4]  950 	ld	b, d
      000394 D1               [12]  951 	pop	de
      000395 D5               [16]  952 	push	de
      000396 D5               [16]  953 	push	de
      000397 3E 26            [ 8]  954 	ld	a, #0x26
      000399 F5               [16]  955 	push	af
      00039A 33               [ 8]  956 	inc	sp
      00039B C5               [16]  957 	push	bc
      00039C CDr00r00         [24]  958 	call	_set_vram_byte
      00039F E8 03            [16]  959 	add	sp, #3
      0003A1 D1               [12]  960 	pop	de
      0003A2 18 26            [12]  961 	jr	00116$
                           0003A4   962 	C$common.c$136$4_0$161	= .
                                    963 	.globl	C$common.c$136$4_0$161
                                    964 ;src\common.c:136: case '.': set_vram_byte(vramAddr++,43);break;
      0003A4                        965 00102$:
      0003A4 4B               [ 4]  966 	ld	c, e
      0003A5 42               [ 4]  967 	ld	b, d
      0003A6 D1               [12]  968 	pop	de
      0003A7 D5               [16]  969 	push	de
      0003A8 D5               [16]  970 	push	de
      0003A9 3E 2B            [ 8]  971 	ld	a, #0x2b
      0003AB F5               [16]  972 	push	af
      0003AC 33               [ 8]  973 	inc	sp
      0003AD C5               [16]  974 	push	bc
      0003AE CDr00r00         [24]  975 	call	_set_vram_byte
      0003B1 E8 03            [16]  976 	add	sp, #3
      0003B3 D1               [12]  977 	pop	de
      0003B4 18 14            [12]  978 	jr	00116$
                           0003B6   979 	C$common.c$137$4_0$161	= .
                                    980 	.globl	C$common.c$137$4_0$161
                                    981 ;src\common.c:137: case '/': set_vram_byte(vramAddr++,40);break;
      0003B6                        982 00103$:
      0003B6 4B               [ 4]  983 	ld	c, e
      0003B7 42               [ 4]  984 	ld	b, d
      0003B8 D1               [12]  985 	pop	de
      0003B9 D5               [16]  986 	push	de
      0003BA D5               [16]  987 	push	de
      0003BB 3E 28            [ 8]  988 	ld	a, #0x28
      0003BD F5               [16]  989 	push	af
      0003BE 33               [ 8]  990 	inc	sp
      0003BF C5               [16]  991 	push	bc
      0003C0 CDr00r00         [24]  992 	call	_set_vram_byte
      0003C3 E8 03            [16]  993 	add	sp, #3
      0003C5 D1               [12]  994 	pop	de
      0003C6 18 02            [12]  995 	jr	00116$
                           0003C8   996 	C$common.c$138$4_0$161	= .
                                    997 	.globl	C$common.c$138$4_0$161
                                    998 ;src\common.c:138: default: vramAddr++; break;
      0003C8                        999 00104$:
      0003C8 D1               [12] 1000 	pop	de
      0003C9 D5               [16] 1001 	push	de
                           0003CA  1002 	C$common.c$139$2_0$159	= .
                                   1003 	.globl	C$common.c$139$2_0$159
                                   1004 ;src\common.c:139: }
      0003CA                       1005 00116$:
                           0003CA  1006 	C$common.c$143$2_0$159	= .
                                   1007 	.globl	C$common.c$143$2_0$159
                                   1008 ;src\common.c:143: i++;
      0003CA F8 02            [12] 1009 	ldhl	sp,	#2
      0003CC 34               [12] 1010 	inc	(hl)
      0003CD C3r0Fr03         [16] 1011 	jp	00118$
      0003D0                       1012 00120$:
                           0003D0  1013 	C$common.c$145$1_0$158	= .
                                   1014 	.globl	C$common.c$145$1_0$158
                                   1015 ;src\common.c:145: VBK_REG=0;
      0003D0 AF               [ 4] 1016 	xor	a, a
      0003D1 E0r00            [12] 1017 	ldh	(_VBK_REG + 0), a
                           0003D3  1018 	C$common.c$147$1_0$158	= .
                                   1019 	.globl	C$common.c$147$1_0$158
                                   1020 ;src\common.c:147: }
      0003D3 E8 03            [16] 1021 	add	sp, #3
      0003D5 E1               [12] 1022 	pop	hl
      0003D6 F1               [12] 1023 	pop	af
      0003D7 E9               [ 4] 1024 	jp	(hl)
                           0003D8  1025 	G$fadeToBlack$0$0	= .
                                   1026 	.globl	G$fadeToBlack$0$0
                           0003D8  1027 	C$common.c$149$1_0$164	= .
                                   1028 	.globl	C$common.c$149$1_0$164
                                   1029 ;src\common.c:149: void fadeToBlack(uint8_t frames)
                                   1030 ;	---------------------------------
                                   1031 ; Function fadeToBlack
                                   1032 ; ---------------------------------
      0003D8                       1033 _fadeToBlack::
      0003D8 4F               [ 4] 1034 	ld	c, a
                           0003D9  1035 	C$common.c$151$2_0$164	= .
                                   1036 	.globl	C$common.c$151$2_0$164
                                   1037 ;src\common.c:151: for (uint8_t i = 0; i < 4; i++)
      0003D9 06 00            [ 8] 1038 	ld	b, #0x00
      0003DB                       1039 00108$:
      0003DB 78               [ 4] 1040 	ld	a, b
      0003DC D6 04            [ 8] 1041 	sub	a, #0x04
      0003DE D0               [20] 1042 	ret	NC
                           0003DF  1043 	C$common.c$153$3_0$165	= .
                                   1044 	.globl	C$common.c$153$3_0$165
                                   1045 ;src\common.c:153: switch(i) 
      0003DF 78               [ 4] 1046 	ld	a, b
      0003E0 B7               [ 4] 1047 	or	a, a
      0003E1 28 0F            [12] 1048 	jr	Z, 00101$
      0003E3 78               [ 4] 1049 	ld	a, b
      0003E4 3D               [ 4] 1050 	dec	a
      0003E5 28 15            [12] 1051 	jr	Z, 00102$
      0003E7 78               [ 4] 1052 	ld	a,b
      0003E8 FE 02            [ 8] 1053 	cp	a,#0x02
      0003EA 28 1A            [12] 1054 	jr	Z, 00103$
      0003EC D6 03            [ 8] 1055 	sub	a, #0x03
      0003EE 28 20            [12] 1056 	jr	Z, 00104$
      0003F0 18 26            [12] 1057 	jr	00105$
                           0003F2  1058 	C$common.c$155$4_0$166	= .
                                   1059 	.globl	C$common.c$155$4_0$166
                                   1060 ;src\common.c:155: case 0: 
      0003F2                       1061 00101$:
                           0003F2  1062 	C$common.c$156$4_0$166	= .
                                   1063 	.globl	C$common.c$156$4_0$166
                                   1064 ;src\common.c:156: BGP_REG = DMG_PALETTE(DMG_WHITE, DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK);
      0003F2 3E E4            [ 8] 1065 	ld	a, #0xe4
      0003F4 E0r00            [12] 1066 	ldh	(_BGP_REG + 0), a
                           0003F6  1067 	C$common.c$157$4_0$166	= .
                                   1068 	.globl	C$common.c$157$4_0$166
                                   1069 ;src\common.c:157: OBP0_REG = DMG_PALETTE(DMG_WHITE, DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK);
      0003F6 3E E4            [ 8] 1070 	ld	a, #0xe4
      0003F8 E0r00            [12] 1071 	ldh	(_OBP0_REG + 0), a
                           0003FA  1072 	C$common.c$158$4_0$166	= .
                                   1073 	.globl	C$common.c$158$4_0$166
                                   1074 ;src\common.c:158: break;
      0003FA 18 1C            [12] 1075 	jr	00105$
                           0003FC  1076 	C$common.c$159$4_0$166	= .
                                   1077 	.globl	C$common.c$159$4_0$166
                                   1078 ;src\common.c:159: case 1: 
      0003FC                       1079 00102$:
                           0003FC  1080 	C$common.c$160$4_0$166	= .
                                   1081 	.globl	C$common.c$160$4_0$166
                                   1082 ;src\common.c:160: BGP_REG = DMG_PALETTE(DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK, DMG_BLACK);
      0003FC 3E F9            [ 8] 1083 	ld	a, #0xf9
      0003FE E0r00            [12] 1084 	ldh	(_BGP_REG + 0), a
                           000400  1085 	C$common.c$161$4_0$166	= .
                                   1086 	.globl	C$common.c$161$4_0$166
                                   1087 ;src\common.c:161: OBP0_REG = DMG_PALETTE(DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK, DMG_BLACK);
      000400 3E F9            [ 8] 1088 	ld	a, #0xf9
      000402 E0r00            [12] 1089 	ldh	(_OBP0_REG + 0), a
                           000404  1090 	C$common.c$162$4_0$166	= .
                                   1091 	.globl	C$common.c$162$4_0$166
                                   1092 ;src\common.c:162: break;
      000404 18 12            [12] 1093 	jr	00105$
                           000406  1094 	C$common.c$163$4_0$166	= .
                                   1095 	.globl	C$common.c$163$4_0$166
                                   1096 ;src\common.c:163: case 2:
      000406                       1097 00103$:
                           000406  1098 	C$common.c$164$4_0$166	= .
                                   1099 	.globl	C$common.c$164$4_0$166
                                   1100 ;src\common.c:164: BGP_REG = DMG_PALETTE(DMG_DARK_GRAY, DMG_BLACK, DMG_BLACK, DMG_BLACK);
      000406 3E FE            [ 8] 1101 	ld	a, #0xfe
      000408 E0r00            [12] 1102 	ldh	(_BGP_REG + 0), a
                           00040A  1103 	C$common.c$165$4_0$166	= .
                                   1104 	.globl	C$common.c$165$4_0$166
                                   1105 ;src\common.c:165: OBP0_REG = DMG_PALETTE(DMG_DARK_GRAY, DMG_BLACK, DMG_BLACK, DMG_BLACK);
      00040A 3E FE            [ 8] 1106 	ld	a, #0xfe
      00040C E0r00            [12] 1107 	ldh	(_OBP0_REG + 0), a
                           00040E  1108 	C$common.c$166$4_0$166	= .
                                   1109 	.globl	C$common.c$166$4_0$166
                                   1110 ;src\common.c:166: break;
      00040E 18 08            [12] 1111 	jr	00105$
                           000410  1112 	C$common.c$167$4_0$166	= .
                                   1113 	.globl	C$common.c$167$4_0$166
                                   1114 ;src\common.c:167: case 3:
      000410                       1115 00104$:
                           000410  1116 	C$common.c$168$4_0$166	= .
                                   1117 	.globl	C$common.c$168$4_0$166
                                   1118 ;src\common.c:168: BGP_REG = DMG_PALETTE(DMG_BLACK, DMG_BLACK, DMG_BLACK, DMG_BLACK);
      000410 3E FF            [ 8] 1119 	ld	a, #0xff
      000412 E0r00            [12] 1120 	ldh	(_BGP_REG + 0), a
                           000414  1121 	C$common.c$169$4_0$166	= .
                                   1122 	.globl	C$common.c$169$4_0$166
                                   1123 ;src\common.c:169: OBP0_REG = DMG_PALETTE(DMG_BLACK, DMG_BLACK, DMG_BLACK, DMG_BLACK);
      000414 3E FF            [ 8] 1124 	ld	a, #0xff
      000416 E0r00            [12] 1125 	ldh	(_OBP0_REG + 0), a
                           000418  1126 	C$common.c$171$3_0$165	= .
                                   1127 	.globl	C$common.c$171$3_0$165
                                   1128 ;src\common.c:171: }
      000418                       1129 00105$:
                           000418  1130 	C$common.c$172$3_0$165	= .
                                   1131 	.globl	C$common.c$172$3_0$165
                                   1132 ;src\common.c:172: performantdelay(frames);
      000418 C5               [16] 1133 	push	bc
      000419 79               [ 4] 1134 	ld	a, c
      00041A CDr00r00         [24] 1135 	call	_performantdelay
      00041D C1               [12] 1136 	pop	bc
                           00041E  1137 	C$common.c$151$2_0$164	= .
                                   1138 	.globl	C$common.c$151$2_0$164
                                   1139 ;src\common.c:151: for (uint8_t i = 0; i < 4; i++)
      00041E 04               [ 4] 1140 	inc	b
                           00041F  1141 	C$common.c$174$2_0$164	= .
                                   1142 	.globl	C$common.c$174$2_0$164
                                   1143 ;src\common.c:174: }
                           00041F  1144 	C$common.c$174$2_0$164	= .
                                   1145 	.globl	C$common.c$174$2_0$164
                           00041F  1146 	XG$fadeToBlack$0$0	= .
                                   1147 	.globl	XG$fadeToBlack$0$0
      00041F 18 BA            [12] 1148 	jr	00108$
                           000421  1149 	G$fadeFromBlack$0$0	= .
                                   1150 	.globl	G$fadeFromBlack$0$0
                           000421  1151 	C$common.c$176$2_0$169	= .
                                   1152 	.globl	C$common.c$176$2_0$169
                                   1153 ;src\common.c:176: void fadeFromBlack(uint8_t frames)
                                   1154 ;	---------------------------------
                                   1155 ; Function fadeFromBlack
                                   1156 ; ---------------------------------
      000421                       1157 _fadeFromBlack::
      000421 4F               [ 4] 1158 	ld	c, a
                           000422  1159 	C$common.c$178$2_0$169	= .
                                   1160 	.globl	C$common.c$178$2_0$169
                                   1161 ;src\common.c:178: for (uint8_t i = 0; i < 4; i++)
      000422 06 00            [ 8] 1162 	ld	b, #0x00
      000424                       1163 00108$:
      000424 78               [ 4] 1164 	ld	a, b
      000425 D6 04            [ 8] 1165 	sub	a, #0x04
      000427 D0               [20] 1166 	ret	NC
                           000428  1167 	C$common.c$180$3_0$170	= .
                                   1168 	.globl	C$common.c$180$3_0$170
                                   1169 ;src\common.c:180: switch(i) 
      000428 78               [ 4] 1170 	ld	a, b
      000429 B7               [ 4] 1171 	or	a, a
      00042A 28 0F            [12] 1172 	jr	Z, 00101$
      00042C 78               [ 4] 1173 	ld	a, b
      00042D 3D               [ 4] 1174 	dec	a
      00042E 28 15            [12] 1175 	jr	Z, 00102$
      000430 78               [ 4] 1176 	ld	a,b
      000431 FE 02            [ 8] 1177 	cp	a,#0x02
      000433 28 1A            [12] 1178 	jr	Z, 00103$
      000435 D6 03            [ 8] 1179 	sub	a, #0x03
      000437 28 20            [12] 1180 	jr	Z, 00104$
      000439 18 26            [12] 1181 	jr	00105$
                           00043B  1182 	C$common.c$182$4_0$171	= .
                                   1183 	.globl	C$common.c$182$4_0$171
                                   1184 ;src\common.c:182: case 0: 
      00043B                       1185 00101$:
                           00043B  1186 	C$common.c$183$4_0$171	= .
                                   1187 	.globl	C$common.c$183$4_0$171
                                   1188 ;src\common.c:183: BGP_REG = DMG_PALETTE(DMG_DARK_GRAY, DMG_BLACK, DMG_BLACK, DMG_BLACK);
      00043B 3E FE            [ 8] 1189 	ld	a, #0xfe
      00043D E0r00            [12] 1190 	ldh	(_BGP_REG + 0), a
                           00043F  1191 	C$common.c$184$4_0$171	= .
                                   1192 	.globl	C$common.c$184$4_0$171
                                   1193 ;src\common.c:184: OBP0_REG = DMG_PALETTE(DMG_DARK_GRAY, DMG_BLACK, DMG_BLACK, DMG_BLACK);
      00043F 3E FE            [ 8] 1194 	ld	a, #0xfe
      000441 E0r00            [12] 1195 	ldh	(_OBP0_REG + 0), a
                           000443  1196 	C$common.c$185$4_0$171	= .
                                   1197 	.globl	C$common.c$185$4_0$171
                                   1198 ;src\common.c:185: break;
      000443 18 1C            [12] 1199 	jr	00105$
                           000445  1200 	C$common.c$186$4_0$171	= .
                                   1201 	.globl	C$common.c$186$4_0$171
                                   1202 ;src\common.c:186: case 1: 
      000445                       1203 00102$:
                           000445  1204 	C$common.c$187$4_0$171	= .
                                   1205 	.globl	C$common.c$187$4_0$171
                                   1206 ;src\common.c:187: BGP_REG = DMG_PALETTE(DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK, DMG_BLACK);
      000445 3E F9            [ 8] 1207 	ld	a, #0xf9
      000447 E0r00            [12] 1208 	ldh	(_BGP_REG + 0), a
                           000449  1209 	C$common.c$188$4_0$171	= .
                                   1210 	.globl	C$common.c$188$4_0$171
                                   1211 ;src\common.c:188: OBP0_REG = DMG_PALETTE(DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK, DMG_BLACK);
      000449 3E F9            [ 8] 1212 	ld	a, #0xf9
      00044B E0r00            [12] 1213 	ldh	(_OBP0_REG + 0), a
                           00044D  1214 	C$common.c$189$4_0$171	= .
                                   1215 	.globl	C$common.c$189$4_0$171
                                   1216 ;src\common.c:189: break;
      00044D 18 12            [12] 1217 	jr	00105$
                           00044F  1218 	C$common.c$190$4_0$171	= .
                                   1219 	.globl	C$common.c$190$4_0$171
                                   1220 ;src\common.c:190: case 2:
      00044F                       1221 00103$:
                           00044F  1222 	C$common.c$191$4_0$171	= .
                                   1223 	.globl	C$common.c$191$4_0$171
                                   1224 ;src\common.c:191: BGP_REG = DMG_PALETTE(DMG_LITE_GRAY, DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK);
      00044F 3E E5            [ 8] 1225 	ld	a, #0xe5
      000451 E0r00            [12] 1226 	ldh	(_BGP_REG + 0), a
                           000453  1227 	C$common.c$192$4_0$171	= .
                                   1228 	.globl	C$common.c$192$4_0$171
                                   1229 ;src\common.c:192: OBP0_REG = DMG_PALETTE(DMG_LITE_GRAY, DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK);
      000453 3E E5            [ 8] 1230 	ld	a, #0xe5
      000455 E0r00            [12] 1231 	ldh	(_OBP0_REG + 0), a
                           000457  1232 	C$common.c$193$4_0$171	= .
                                   1233 	.globl	C$common.c$193$4_0$171
                                   1234 ;src\common.c:193: break;
      000457 18 08            [12] 1235 	jr	00105$
                           000459  1236 	C$common.c$194$4_0$171	= .
                                   1237 	.globl	C$common.c$194$4_0$171
                                   1238 ;src\common.c:194: case 3:
      000459                       1239 00104$:
                           000459  1240 	C$common.c$195$4_0$171	= .
                                   1241 	.globl	C$common.c$195$4_0$171
                                   1242 ;src\common.c:195: BGP_REG = DMG_PALETTE(DMG_WHITE, DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK);
      000459 3E E4            [ 8] 1243 	ld	a, #0xe4
      00045B E0r00            [12] 1244 	ldh	(_BGP_REG + 0), a
                           00045D  1245 	C$common.c$196$4_0$171	= .
                                   1246 	.globl	C$common.c$196$4_0$171
                                   1247 ;src\common.c:196: OBP0_REG = DMG_PALETTE(DMG_WHITE, DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK);
      00045D 3E E4            [ 8] 1248 	ld	a, #0xe4
      00045F E0r00            [12] 1249 	ldh	(_OBP0_REG + 0), a
                           000461  1250 	C$common.c$198$3_0$170	= .
                                   1251 	.globl	C$common.c$198$3_0$170
                                   1252 ;src\common.c:198: }
      000461                       1253 00105$:
                           000461  1254 	C$common.c$199$3_0$170	= .
                                   1255 	.globl	C$common.c$199$3_0$170
                                   1256 ;src\common.c:199: performantdelay(frames);
      000461 C5               [16] 1257 	push	bc
      000462 79               [ 4] 1258 	ld	a, c
      000463 CDr00r00         [24] 1259 	call	_performantdelay
      000466 C1               [12] 1260 	pop	bc
                           000467  1261 	C$common.c$178$2_0$169	= .
                                   1262 	.globl	C$common.c$178$2_0$169
                                   1263 ;src\common.c:178: for (uint8_t i = 0; i < 4; i++)
      000467 04               [ 4] 1264 	inc	b
                           000468  1265 	C$common.c$201$2_0$169	= .
                                   1266 	.globl	C$common.c$201$2_0$169
                                   1267 ;src\common.c:201: }
                           000468  1268 	C$common.c$201$2_0$169	= .
                                   1269 	.globl	C$common.c$201$2_0$169
                           000468  1270 	XG$fadeFromBlack$0$0	= .
                                   1271 	.globl	XG$fadeFromBlack$0$0
      000468 18 BA            [12] 1272 	jr	00108$
                           00046A  1273 	G$fadeToWhite$0$0	= .
                                   1274 	.globl	G$fadeToWhite$0$0
                           00046A  1275 	C$common.c$203$2_0$174	= .
                                   1276 	.globl	C$common.c$203$2_0$174
                                   1277 ;src\common.c:203: void fadeToWhite(uint8_t frames)
                                   1278 ;	---------------------------------
                                   1279 ; Function fadeToWhite
                                   1280 ; ---------------------------------
      00046A                       1281 _fadeToWhite::
      00046A 4F               [ 4] 1282 	ld	c, a
                           00046B  1283 	C$common.c$205$2_0$174	= .
                                   1284 	.globl	C$common.c$205$2_0$174
                                   1285 ;src\common.c:205: for (uint8_t i = 0; i < 5; i++)
      00046B 06 00            [ 8] 1286 	ld	b, #0x00
      00046D                       1287 00109$:
      00046D 78               [ 4] 1288 	ld	a, b
      00046E D6 05            [ 8] 1289 	sub	a, #0x05
      000470 D0               [20] 1290 	ret	NC
                           000471  1291 	C$common.c$207$3_0$175	= .
                                   1292 	.globl	C$common.c$207$3_0$175
                                   1293 ;src\common.c:207: switch(i) 
      000471 3E 04            [ 8] 1294 	ld	a, #0x04
      000473 90               [ 4] 1295 	sub	a, b
      000474 38 41            [12] 1296 	jr	C, 00106$
      000476 58               [ 4] 1297 	ld	e, b
      000477 16 00            [ 8] 1298 	ld	d, #0x00
      000479 21r7Fr04         [12] 1299 	ld	hl, #00129$
      00047C 19               [ 8] 1300 	add	hl, de
      00047D 19               [ 8] 1301 	add	hl, de
                           00047E  1302 	C$common.c$209$4_0$176	= .
                                   1303 	.globl	C$common.c$209$4_0$176
                                   1304 ;src\common.c:209: case 0: 
      00047E E9               [ 4] 1305 	jp	(hl)
      00047F                       1306 00129$:
      00047F 18 08            [12] 1307 	jr	00101$
      000481 18 10            [12] 1308 	jr	00102$
      000483 18 18            [12] 1309 	jr	00103$
      000485 18 20            [12] 1310 	jr	00104$
      000487 18 28            [12] 1311 	jr	00105$
      000489                       1312 00101$:
                           000489  1313 	C$common.c$210$4_0$176	= .
                                   1314 	.globl	C$common.c$210$4_0$176
                                   1315 ;src\common.c:210: BGP_REG = DMG_PALETTE(DMG_WHITE, DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK);
      000489 3E E4            [ 8] 1316 	ld	a, #0xe4
      00048B E0r00            [12] 1317 	ldh	(_BGP_REG + 0), a
                           00048D  1318 	C$common.c$211$4_0$176	= .
                                   1319 	.globl	C$common.c$211$4_0$176
                                   1320 ;src\common.c:211: OBP0_REG = DMG_PALETTE(DMG_WHITE, DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK);
      00048D 3E E4            [ 8] 1321 	ld	a, #0xe4
      00048F E0r00            [12] 1322 	ldh	(_OBP0_REG + 0), a
                           000491  1323 	C$common.c$212$4_0$176	= .
                                   1324 	.globl	C$common.c$212$4_0$176
                                   1325 ;src\common.c:212: break;
      000491 18 24            [12] 1326 	jr	00106$
                           000493  1327 	C$common.c$213$4_0$176	= .
                                   1328 	.globl	C$common.c$213$4_0$176
                                   1329 ;src\common.c:213: case 1: 
      000493                       1330 00102$:
                           000493  1331 	C$common.c$214$4_0$176	= .
                                   1332 	.globl	C$common.c$214$4_0$176
                                   1333 ;src\common.c:214: BGP_REG = DMG_PALETTE(DMG_WHITE, DMG_LITE_GRAY, DMG_LITE_GRAY, DMG_BLACK);
      000493 3E D4            [ 8] 1334 	ld	a, #0xd4
      000495 E0r00            [12] 1335 	ldh	(_BGP_REG + 0), a
                           000497  1336 	C$common.c$215$4_0$176	= .
                                   1337 	.globl	C$common.c$215$4_0$176
                                   1338 ;src\common.c:215: OBP0_REG = DMG_PALETTE(DMG_LITE_GRAY, DMG_LITE_GRAY, DMG_LITE_GRAY, DMG_BLACK);
      000497 3E D5            [ 8] 1339 	ld	a, #0xd5
      000499 E0r00            [12] 1340 	ldh	(_OBP0_REG + 0), a
                           00049B  1341 	C$common.c$216$4_0$176	= .
                                   1342 	.globl	C$common.c$216$4_0$176
                                   1343 ;src\common.c:216: break;
      00049B 18 1A            [12] 1344 	jr	00106$
                           00049D  1345 	C$common.c$217$4_0$176	= .
                                   1346 	.globl	C$common.c$217$4_0$176
                                   1347 ;src\common.c:217: case 2:
      00049D                       1348 00103$:
                           00049D  1349 	C$common.c$218$4_0$176	= .
                                   1350 	.globl	C$common.c$218$4_0$176
                                   1351 ;src\common.c:218: BGP_REG = DMG_PALETTE(DMG_WHITE, DMG_WHITE, DMG_LITE_GRAY, DMG_DARK_GRAY);
      00049D 3E 90            [ 8] 1352 	ld	a, #0x90
      00049F E0r00            [12] 1353 	ldh	(_BGP_REG + 0), a
                           0004A1  1354 	C$common.c$219$4_0$176	= .
                                   1355 	.globl	C$common.c$219$4_0$176
                                   1356 ;src\common.c:219: OBP0_REG = DMG_PALETTE(DMG_WHITE, DMG_WHITE, DMG_LITE_GRAY, DMG_DARK_GRAY);
      0004A1 3E 90            [ 8] 1357 	ld	a, #0x90
      0004A3 E0r00            [12] 1358 	ldh	(_OBP0_REG + 0), a
                           0004A5  1359 	C$common.c$220$4_0$176	= .
                                   1360 	.globl	C$common.c$220$4_0$176
                                   1361 ;src\common.c:220: break;
      0004A5 18 10            [12] 1362 	jr	00106$
                           0004A7  1363 	C$common.c$221$4_0$176	= .
                                   1364 	.globl	C$common.c$221$4_0$176
                                   1365 ;src\common.c:221: case 3:
      0004A7                       1366 00104$:
                           0004A7  1367 	C$common.c$222$4_0$176	= .
                                   1368 	.globl	C$common.c$222$4_0$176
                                   1369 ;src\common.c:222: BGP_REG = DMG_PALETTE(DMG_WHITE, DMG_WHITE, DMG_WHITE, DMG_LITE_GRAY);
      0004A7 3E 40            [ 8] 1370 	ld	a, #0x40
      0004A9 E0r00            [12] 1371 	ldh	(_BGP_REG + 0), a
                           0004AB  1372 	C$common.c$223$4_0$176	= .
                                   1373 	.globl	C$common.c$223$4_0$176
                                   1374 ;src\common.c:223: OBP0_REG = DMG_PALETTE(DMG_WHITE, DMG_WHITE, DMG_WHITE, DMG_LITE_GRAY);
      0004AB 3E 40            [ 8] 1375 	ld	a, #0x40
      0004AD E0r00            [12] 1376 	ldh	(_OBP0_REG + 0), a
                           0004AF  1377 	C$common.c$224$4_0$176	= .
                                   1378 	.globl	C$common.c$224$4_0$176
                                   1379 ;src\common.c:224: break;
      0004AF 18 06            [12] 1380 	jr	00106$
                           0004B1  1381 	C$common.c$225$4_0$176	= .
                                   1382 	.globl	C$common.c$225$4_0$176
                                   1383 ;src\common.c:225: case 4:
      0004B1                       1384 00105$:
                           0004B1  1385 	C$common.c$226$4_0$176	= .
                                   1386 	.globl	C$common.c$226$4_0$176
                                   1387 ;src\common.c:226: BGP_REG = DMG_PALETTE(DMG_WHITE, DMG_WHITE, DMG_WHITE, DMG_WHITE);
      0004B1 AF               [ 4] 1388 	xor	a, a
      0004B2 E0r00            [12] 1389 	ldh	(_BGP_REG + 0), a
                           0004B4  1390 	C$common.c$227$4_0$176	= .
                                   1391 	.globl	C$common.c$227$4_0$176
                                   1392 ;src\common.c:227: OBP0_REG = DMG_PALETTE(DMG_WHITE, DMG_WHITE, DMG_WHITE, DMG_WHITE);
      0004B4 AF               [ 4] 1393 	xor	a, a
      0004B5 E0r00            [12] 1394 	ldh	(_OBP0_REG + 0), a
                           0004B7  1395 	C$common.c$229$3_0$175	= .
                                   1396 	.globl	C$common.c$229$3_0$175
                                   1397 ;src\common.c:229: }
      0004B7                       1398 00106$:
                           0004B7  1399 	C$common.c$230$3_0$175	= .
                                   1400 	.globl	C$common.c$230$3_0$175
                                   1401 ;src\common.c:230: performantdelay(frames);
      0004B7 C5               [16] 1402 	push	bc
      0004B8 79               [ 4] 1403 	ld	a, c
      0004B9 CDr00r00         [24] 1404 	call	_performantdelay
      0004BC C1               [12] 1405 	pop	bc
                           0004BD  1406 	C$common.c$205$2_0$174	= .
                                   1407 	.globl	C$common.c$205$2_0$174
                                   1408 ;src\common.c:205: for (uint8_t i = 0; i < 5; i++)
      0004BD 04               [ 4] 1409 	inc	b
                           0004BE  1410 	C$common.c$232$2_0$174	= .
                                   1411 	.globl	C$common.c$232$2_0$174
                                   1412 ;src\common.c:232: }
                           0004BE  1413 	C$common.c$232$2_0$174	= .
                                   1414 	.globl	C$common.c$232$2_0$174
                           0004BE  1415 	XG$fadeToWhite$0$0	= .
                                   1416 	.globl	XG$fadeToWhite$0$0
      0004BE 18 AD            [12] 1417 	jr	00109$
                           0004C0  1418 	G$fadeFromWhite$0$0	= .
                                   1419 	.globl	G$fadeFromWhite$0$0
                           0004C0  1420 	C$common.c$234$2_0$179	= .
                                   1421 	.globl	C$common.c$234$2_0$179
                                   1422 ;src\common.c:234: void fadeFromWhite(uint8_t frames)
                                   1423 ;	---------------------------------
                                   1424 ; Function fadeFromWhite
                                   1425 ; ---------------------------------
      0004C0                       1426 _fadeFromWhite::
      0004C0 4F               [ 4] 1427 	ld	c, a
                           0004C1  1428 	C$common.c$236$2_0$179	= .
                                   1429 	.globl	C$common.c$236$2_0$179
                                   1430 ;src\common.c:236: for (uint8_t i = 0; i < 4; i++)
      0004C1 06 00            [ 8] 1431 	ld	b, #0x00
      0004C3                       1432 00108$:
      0004C3 78               [ 4] 1433 	ld	a, b
      0004C4 D6 04            [ 8] 1434 	sub	a, #0x04
      0004C6 D0               [20] 1435 	ret	NC
                           0004C7  1436 	C$common.c$238$3_0$180	= .
                                   1437 	.globl	C$common.c$238$3_0$180
                                   1438 ;src\common.c:238: switch(i) 
      0004C7 78               [ 4] 1439 	ld	a, b
      0004C8 B7               [ 4] 1440 	or	a, a
      0004C9 28 0F            [12] 1441 	jr	Z, 00101$
      0004CB 78               [ 4] 1442 	ld	a, b
      0004CC 3D               [ 4] 1443 	dec	a
      0004CD 28 15            [12] 1444 	jr	Z, 00102$
      0004CF 78               [ 4] 1445 	ld	a,b
      0004D0 FE 02            [ 8] 1446 	cp	a,#0x02
      0004D2 28 1A            [12] 1447 	jr	Z, 00103$
      0004D4 D6 03            [ 8] 1448 	sub	a, #0x03
      0004D6 28 20            [12] 1449 	jr	Z, 00104$
      0004D8 18 26            [12] 1450 	jr	00105$
                           0004DA  1451 	C$common.c$240$4_0$181	= .
                                   1452 	.globl	C$common.c$240$4_0$181
                                   1453 ;src\common.c:240: case 0: 
      0004DA                       1454 00101$:
                           0004DA  1455 	C$common.c$241$4_0$181	= .
                                   1456 	.globl	C$common.c$241$4_0$181
                                   1457 ;src\common.c:241: BGP_REG = DMG_PALETTE(DMG_WHITE, DMG_WHITE, DMG_WHITE, DMG_LITE_GRAY);
      0004DA 3E 40            [ 8] 1458 	ld	a, #0x40
      0004DC E0r00            [12] 1459 	ldh	(_BGP_REG + 0), a
                           0004DE  1460 	C$common.c$242$4_0$181	= .
                                   1461 	.globl	C$common.c$242$4_0$181
                                   1462 ;src\common.c:242: OBP0_REG = DMG_PALETTE(DMG_WHITE, DMG_WHITE, DMG_WHITE, DMG_LITE_GRAY);
      0004DE 3E 40            [ 8] 1463 	ld	a, #0x40
      0004E0 E0r00            [12] 1464 	ldh	(_OBP0_REG + 0), a
                           0004E2  1465 	C$common.c$243$4_0$181	= .
                                   1466 	.globl	C$common.c$243$4_0$181
                                   1467 ;src\common.c:243: break;
      0004E2 18 1C            [12] 1468 	jr	00105$
                           0004E4  1469 	C$common.c$244$4_0$181	= .
                                   1470 	.globl	C$common.c$244$4_0$181
                                   1471 ;src\common.c:244: case 1: 
      0004E4                       1472 00102$:
                           0004E4  1473 	C$common.c$245$4_0$181	= .
                                   1474 	.globl	C$common.c$245$4_0$181
                                   1475 ;src\common.c:245: BGP_REG = DMG_PALETTE(DMG_WHITE, DMG_WHITE, DMG_LITE_GRAY, DMG_DARK_GRAY);
      0004E4 3E 90            [ 8] 1476 	ld	a, #0x90
      0004E6 E0r00            [12] 1477 	ldh	(_BGP_REG + 0), a
                           0004E8  1478 	C$common.c$246$4_0$181	= .
                                   1479 	.globl	C$common.c$246$4_0$181
                                   1480 ;src\common.c:246: OBP0_REG = DMG_PALETTE(DMG_WHITE, DMG_WHITE, DMG_LITE_GRAY, DMG_DARK_GRAY);
      0004E8 3E 90            [ 8] 1481 	ld	a, #0x90
      0004EA E0r00            [12] 1482 	ldh	(_OBP0_REG + 0), a
                           0004EC  1483 	C$common.c$247$4_0$181	= .
                                   1484 	.globl	C$common.c$247$4_0$181
                                   1485 ;src\common.c:247: break;
      0004EC 18 12            [12] 1486 	jr	00105$
                           0004EE  1487 	C$common.c$248$4_0$181	= .
                                   1488 	.globl	C$common.c$248$4_0$181
                                   1489 ;src\common.c:248: case 2:
      0004EE                       1490 00103$:
                           0004EE  1491 	C$common.c$249$4_0$181	= .
                                   1492 	.globl	C$common.c$249$4_0$181
                                   1493 ;src\common.c:249: BGP_REG = DMG_PALETTE(DMG_WHITE, DMG_LITE_GRAY, DMG_LITE_GRAY, DMG_BLACK);
      0004EE 3E D4            [ 8] 1494 	ld	a, #0xd4
      0004F0 E0r00            [12] 1495 	ldh	(_BGP_REG + 0), a
                           0004F2  1496 	C$common.c$250$4_0$181	= .
                                   1497 	.globl	C$common.c$250$4_0$181
                                   1498 ;src\common.c:250: OBP0_REG = DMG_PALETTE(DMG_LITE_GRAY, DMG_LITE_GRAY, DMG_LITE_GRAY, DMG_BLACK);
      0004F2 3E D5            [ 8] 1499 	ld	a, #0xd5
      0004F4 E0r00            [12] 1500 	ldh	(_OBP0_REG + 0), a
                           0004F6  1501 	C$common.c$251$4_0$181	= .
                                   1502 	.globl	C$common.c$251$4_0$181
                                   1503 ;src\common.c:251: break;
      0004F6 18 08            [12] 1504 	jr	00105$
                           0004F8  1505 	C$common.c$252$4_0$181	= .
                                   1506 	.globl	C$common.c$252$4_0$181
                                   1507 ;src\common.c:252: case 3:
      0004F8                       1508 00104$:
                           0004F8  1509 	C$common.c$253$4_0$181	= .
                                   1510 	.globl	C$common.c$253$4_0$181
                                   1511 ;src\common.c:253: BGP_REG = DMG_PALETTE(DMG_WHITE, DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK);
      0004F8 3E E4            [ 8] 1512 	ld	a, #0xe4
      0004FA E0r00            [12] 1513 	ldh	(_BGP_REG + 0), a
                           0004FC  1514 	C$common.c$254$4_0$181	= .
                                   1515 	.globl	C$common.c$254$4_0$181
                                   1516 ;src\common.c:254: OBP0_REG = DMG_PALETTE(DMG_WHITE, DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK);
      0004FC 3E E4            [ 8] 1517 	ld	a, #0xe4
      0004FE E0r00            [12] 1518 	ldh	(_OBP0_REG + 0), a
                           000500  1519 	C$common.c$256$3_0$180	= .
                                   1520 	.globl	C$common.c$256$3_0$180
                                   1521 ;src\common.c:256: }
      000500                       1522 00105$:
                           000500  1523 	C$common.c$257$3_0$180	= .
                                   1524 	.globl	C$common.c$257$3_0$180
                                   1525 ;src\common.c:257: performantdelay(frames);
      000500 C5               [16] 1526 	push	bc
      000501 79               [ 4] 1527 	ld	a, c
      000502 CDr00r00         [24] 1528 	call	_performantdelay
      000505 C1               [12] 1529 	pop	bc
                           000506  1530 	C$common.c$236$2_0$179	= .
                                   1531 	.globl	C$common.c$236$2_0$179
                                   1532 ;src\common.c:236: for (uint8_t i = 0; i < 4; i++)
      000506 04               [ 4] 1533 	inc	b
                           000507  1534 	C$common.c$259$2_0$179	= .
                                   1535 	.globl	C$common.c$259$2_0$179
                                   1536 ;src\common.c:259: }
                           000507  1537 	C$common.c$259$2_0$179	= .
                                   1538 	.globl	C$common.c$259$2_0$179
                           000507  1539 	XG$fadeFromWhite$0$0	= .
                                   1540 	.globl	XG$fadeFromWhite$0$0
      000507 18 BA            [12] 1541 	jr	00108$
                           000509  1542 	G$InvertColor$0$0	= .
                                   1543 	.globl	G$InvertColor$0$0
                           000509  1544 	C$common.c$261$2_0$182	= .
                                   1545 	.globl	C$common.c$261$2_0$182
                                   1546 ;src\common.c:261: void InvertColor()
                                   1547 ;	---------------------------------
                                   1548 ; Function InvertColor
                                   1549 ; ---------------------------------
      000509                       1550 _InvertColor::
                           000509  1551 	C$common.c$263$1_0$182	= .
                                   1552 	.globl	C$common.c$263$1_0$182
                                   1553 ;src\common.c:263: BGP_REG = DMG_PALETTE(DMG_BLACK, DMG_DARK_GRAY, DMG_LITE_GRAY, DMG_WHITE);
      000509 3E 1B            [ 8] 1554 	ld	a, #0x1b
      00050B E0r00            [12] 1555 	ldh	(_BGP_REG + 0), a
                           00050D  1556 	C$common.c$264$1_0$182	= .
                                   1557 	.globl	C$common.c$264$1_0$182
                                   1558 ;src\common.c:264: OBP0_REG = DMG_PALETTE(DMG_BLACK, DMG_DARK_GRAY, DMG_LITE_GRAY, DMG_WHITE);
      00050D 3E 1B            [ 8] 1559 	ld	a, #0x1b
      00050F E0r00            [12] 1560 	ldh	(_OBP0_REG + 0), a
                           000511  1561 	C$common.c$265$1_0$182	= .
                                   1562 	.globl	C$common.c$265$1_0$182
                                   1563 ;src\common.c:265: }
                           000511  1564 	C$common.c$265$1_0$182	= .
                                   1565 	.globl	C$common.c$265$1_0$182
                           000511  1566 	XG$InvertColor$0$0	= .
                                   1567 	.globl	XG$InvertColor$0$0
      000511 C9               [16] 1568 	ret
                           000512  1569 	G$ResetColor$0$0	= .
                                   1570 	.globl	G$ResetColor$0$0
                           000512  1571 	C$common.c$267$1_0$183	= .
                                   1572 	.globl	C$common.c$267$1_0$183
                                   1573 ;src\common.c:267: void ResetColor()
                                   1574 ;	---------------------------------
                                   1575 ; Function ResetColor
                                   1576 ; ---------------------------------
      000512                       1577 _ResetColor::
                           000512  1578 	C$common.c$269$1_0$183	= .
                                   1579 	.globl	C$common.c$269$1_0$183
                                   1580 ;src\common.c:269: BGP_REG = DMG_PALETTE(DMG_WHITE, DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK);
      000512 3E E4            [ 8] 1581 	ld	a, #0xe4
      000514 E0r00            [12] 1582 	ldh	(_BGP_REG + 0), a
                           000516  1583 	C$common.c$270$1_0$183	= .
                                   1584 	.globl	C$common.c$270$1_0$183
                                   1585 ;src\common.c:270: OBP0_REG = DMG_PALETTE(DMG_WHITE, DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK);
      000516 3E E4            [ 8] 1586 	ld	a, #0xe4
      000518 E0r00            [12] 1587 	ldh	(_OBP0_REG + 0), a
                           00051A  1588 	C$common.c$271$1_0$183	= .
                                   1589 	.globl	C$common.c$271$1_0$183
                                   1590 ;src\common.c:271: }
                           00051A  1591 	C$common.c$271$1_0$183	= .
                                   1592 	.globl	C$common.c$271$1_0$183
                           00051A  1593 	XG$ResetColor$0$0	= .
                                   1594 	.globl	XG$ResetColor$0$0
      00051A C9               [16] 1595 	ret
                                   1596 	.area _CODE
                                   1597 	.area _INITIALIZER
                           000000  1598 Fcommon$__xinit_joypadPrevious$0_0$0 == .
      000000                       1599 __xinit__joypadPrevious:
      000000 00                    1600 	.db #0x00	; 0
                           000001  1601 Fcommon$__xinit_joypadCurrent$0_0$0 == .
      000001                       1602 __xinit__joypadCurrent:
      000001 00                    1603 	.db #0x00	; 0
                           000002  1604 Fcommon$__xinit_index$0_0$0 == .
      000002                       1605 __xinit__index:
      000002 00                    1606 	.db #0x00	;  0
                                   1607 	.area _CABS (ABS)
